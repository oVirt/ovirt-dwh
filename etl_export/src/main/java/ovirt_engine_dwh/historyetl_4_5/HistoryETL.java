// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ovirt_engine_dwh.historyetl_4_5;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.RoutineHistoryETL;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tLibraryLoad_1
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaFlex_2
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: HistoryETL Purpose: <br>
 * Description:  <br>
 * @author ydary@redhat.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class HistoryETL implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(deleteIncrement != null){
				
					this.setProperty("deleteIncrement", deleteIncrement.toString());
				
			}
			
			if(deleteMultiplier != null){
				
					this.setProperty("deleteMultiplier", deleteMultiplier.toString());
				
			}
			
			if(dwhAggregationDebug != null){
				
					this.setProperty("dwhAggregationDebug", dwhAggregationDebug.toString());
				
			}
			
			if(dwhUuid != null){
				
					this.setProperty("dwhUuid", dwhUuid.toString());
				
			}
			
			if(etlVersion != null){
				
					this.setProperty("etlVersion", etlVersion.toString());
				
			}
			
			if(hoursToKeepDaily != null){
				
					this.setProperty("hoursToKeepDaily", hoursToKeepDaily.toString());
				
			}
			
			if(hoursToKeepHourly != null){
				
					this.setProperty("hoursToKeepHourly", hoursToKeepHourly.toString());
				
			}
			
			if(hoursToKeepSamples != null){
				
					this.setProperty("hoursToKeepSamples", hoursToKeepSamples.toString());
				
			}
			
			if(lastErrorSent != null){
				
					String pattern_lastErrorSent = "yyyy-MM-dd HH:mm:ss";
					String value_lastErrorSent = "yyyy-MM-dd HH:mm:ss.SSSSSS;2011-07-03 12:46:47.000000";
					String[] parts_lastErrorSent = value_lastErrorSent.split(";");
					if(parts_lastErrorSent.length > 1){
						pattern_lastErrorSent = parts_lastErrorSent[0];
						this.setProperty("lastErrorSent", pattern_lastErrorSent + ";" + FormatterUtils.format_Date(lastErrorSent, pattern_lastErrorSent));
					}else{
						this.setProperty("lastErrorSent", FormatterUtils.format_Date(lastErrorSent, pattern_lastErrorSent));
					}
				
			}
			
			if(ovirtEngineDbDriverClass != null){
				
					this.setProperty("ovirtEngineDbDriverClass", ovirtEngineDbDriverClass.toString());
				
			}
			
			if(ovirtEngineDbJdbcConnection != null){
				
					this.setProperty("ovirtEngineDbJdbcConnection", ovirtEngineDbJdbcConnection.toString());
				
			}
			
			if(ovirtEngineDbPassword != null){
				
					this.setProperty("ovirtEngineDbPassword", ovirtEngineDbPassword.toString());
				
			}
			
			if(ovirtEngineDbUser != null){
				
					this.setProperty("ovirtEngineDbUser", ovirtEngineDbUser.toString());
				
			}
			
			if(ovirtEngineHistoryDbDriverClass != null){
				
					this.setProperty("ovirtEngineHistoryDbDriverClass", ovirtEngineHistoryDbDriverClass.toString());
				
			}
			
			if(ovirtEngineHistoryDbJdbcConnection != null){
				
					this.setProperty("ovirtEngineHistoryDbJdbcConnection", ovirtEngineHistoryDbJdbcConnection.toString());
				
			}
			
			if(ovirtEngineHistoryDbPassword != null){
				
					this.setProperty("ovirtEngineHistoryDbPassword", ovirtEngineHistoryDbPassword.toString());
				
			}
			
			if(ovirtEngineHistoryDbUser != null){
				
					this.setProperty("ovirtEngineHistoryDbUser", ovirtEngineHistoryDbUser.toString());
				
			}
			
			if(runDeleteTime != null){
				
					this.setProperty("runDeleteTime", runDeleteTime.toString());
				
			}
			
			if(runInterleave != null){
				
					this.setProperty("runInterleave", runInterleave.toString());
				
			}
			
			if(timeBetweenErrorEvents != null){
				
					this.setProperty("timeBetweenErrorEvents", timeBetweenErrorEvents.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer deleteIncrement;
public Integer getDeleteIncrement(){
	return this.deleteIncrement;
}
public Integer deleteMultiplier;
public Integer getDeleteMultiplier(){
	return this.deleteMultiplier;
}
public String dwhAggregationDebug;
public String getDwhAggregationDebug(){
	return this.dwhAggregationDebug;
}
public String dwhUuid;
public String getDwhUuid(){
	return this.dwhUuid;
}
public String etlVersion;
public String getEtlVersion(){
	return this.etlVersion;
}
public Integer hoursToKeepDaily;
public Integer getHoursToKeepDaily(){
	return this.hoursToKeepDaily;
}
public Integer hoursToKeepHourly;
public Integer getHoursToKeepHourly(){
	return this.hoursToKeepHourly;
}
public Integer hoursToKeepSamples;
public Integer getHoursToKeepSamples(){
	return this.hoursToKeepSamples;
}
public java.util.Date lastErrorSent;
public java.util.Date getLastErrorSent(){
	return this.lastErrorSent;
}
public String ovirtEngineDbDriverClass;
public String getOvirtEngineDbDriverClass(){
	return this.ovirtEngineDbDriverClass;
}
public String ovirtEngineDbJdbcConnection;
public String getOvirtEngineDbJdbcConnection(){
	return this.ovirtEngineDbJdbcConnection;
}
public java.lang.String ovirtEngineDbPassword;
public java.lang.String getOvirtEngineDbPassword(){
	return this.ovirtEngineDbPassword;
}
public String ovirtEngineDbUser;
public String getOvirtEngineDbUser(){
	return this.ovirtEngineDbUser;
}
public String ovirtEngineHistoryDbDriverClass;
public String getOvirtEngineHistoryDbDriverClass(){
	return this.ovirtEngineHistoryDbDriverClass;
}
public String ovirtEngineHistoryDbJdbcConnection;
public String getOvirtEngineHistoryDbJdbcConnection(){
	return this.ovirtEngineHistoryDbJdbcConnection;
}
public java.lang.String ovirtEngineHistoryDbPassword;
public java.lang.String getOvirtEngineHistoryDbPassword(){
	return this.ovirtEngineHistoryDbPassword;
}
public String ovirtEngineHistoryDbUser;
public String getOvirtEngineHistoryDbUser(){
	return this.ovirtEngineHistoryDbUser;
}
public Integer runDeleteTime;
public Integer getRunDeleteTime(){
	return this.runDeleteTime;
}
public Integer runInterleave;
public Integer getRunInterleave(){
	return this.runInterleave;
}
public Long timeBetweenErrorEvents;
public Long getTimeBetweenErrorEvents(){
	return this.timeBetweenErrorEvents;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "4.5";
	private final String jobName = "HistoryETL";
	private final String projectName = "OVIRT_ENGINE_DWH";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HistoryETL.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HistoryETL.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
			try{
				tLogCatcher_1Process(globalMap);
			}finally{
				talendLogs_LOGSProcess(globalMap);
			}
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCConnection_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCRollback_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCRollback_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCRollback_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCRollback_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCRollback_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCRollback_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCRollback_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCRollback_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCRollback_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCRollback_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCClose_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCClose_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLibraryLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputProperties_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextDump_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tContextDump_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tContextDump_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCConnection_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCConnection_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJDBCConnection_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCConnection_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJDBCInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_CONSOLE_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_CONSOLE_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCRollback_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCRollback_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCRollback_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCRollback_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCRollback_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCClose_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLibraryLoad_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputProperties_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tContextDump_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJDBCConnection_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        				paraList_tRunJob_4.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_4.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_4 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_4.put("deleteIncrement", context.deleteIncrement);
                    paraList_tRunJob_4.add("--context_type " + "deleteIncrement" + "=" + "id_Integer");
                    parentContextMap_tRunJob_4.put("deleteMultiplier", context.deleteMultiplier);
                    paraList_tRunJob_4.add("--context_type " + "deleteMultiplier" + "=" + "id_Integer");
                    parentContextMap_tRunJob_4.put("dwhAggregationDebug", context.dwhAggregationDebug);
                    paraList_tRunJob_4.add("--context_type " + "dwhAggregationDebug" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("dwhUuid", context.dwhUuid);
                    paraList_tRunJob_4.add("--context_type " + "dwhUuid" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("etlVersion", context.etlVersion);
                    paraList_tRunJob_4.add("--context_type " + "etlVersion" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("hoursToKeepDaily", context.hoursToKeepDaily);
                    paraList_tRunJob_4.add("--context_type " + "hoursToKeepDaily" + "=" + "id_Integer");
                    parentContextMap_tRunJob_4.put("hoursToKeepHourly", context.hoursToKeepHourly);
                    paraList_tRunJob_4.add("--context_type " + "hoursToKeepHourly" + "=" + "id_Integer");
                    parentContextMap_tRunJob_4.put("hoursToKeepSamples", context.hoursToKeepSamples);
                    paraList_tRunJob_4.add("--context_type " + "hoursToKeepSamples" + "=" + "id_Integer");
                    parentContextMap_tRunJob_4.put("lastErrorSent", context.lastErrorSent);
                    paraList_tRunJob_4.add("--context_type " + "lastErrorSent" + "=" + "id_Date");
                    parentContextMap_tRunJob_4.put("ovirtEngineDbDriverClass", context.ovirtEngineDbDriverClass);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineDbDriverClass" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("ovirtEngineDbJdbcConnection", context.ovirtEngineDbJdbcConnection);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineDbJdbcConnection" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("ovirtEngineDbPassword", context.ovirtEngineDbPassword);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineDbPassword" + "=" + "id_Password");
                    parentContextMap_tRunJob_4.put("ovirtEngineDbUser", context.ovirtEngineDbUser);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineDbUser" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("ovirtEngineHistoryDbDriverClass", context.ovirtEngineHistoryDbDriverClass);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineHistoryDbDriverClass" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("ovirtEngineHistoryDbJdbcConnection", context.ovirtEngineHistoryDbJdbcConnection);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineHistoryDbJdbcConnection" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("ovirtEngineHistoryDbPassword", context.ovirtEngineHistoryDbPassword);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineHistoryDbPassword" + "=" + "id_Password");
                    parentContextMap_tRunJob_4.put("ovirtEngineHistoryDbUser", context.ovirtEngineHistoryDbUser);
                    paraList_tRunJob_4.add("--context_type " + "ovirtEngineHistoryDbUser" + "=" + "id_String");
                    parentContextMap_tRunJob_4.put("runDeleteTime", context.runDeleteTime);
                    paraList_tRunJob_4.add("--context_type " + "runDeleteTime" + "=" + "id_Integer");
                    parentContextMap_tRunJob_4.put("runInterleave", context.runInterleave);
                    paraList_tRunJob_4.add("--context_type " + "runInterleave" + "=" + "id_Integer");
                    parentContextMap_tRunJob_4.put("timeBetweenErrorEvents", context.timeBetweenErrorEvents);
                    paraList_tRunJob_4.add("--context_type " + "timeBetweenErrorEvents" + "=" + "id_Long");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_4().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_4 = context.propertyNames();
		while (propertyNames_tRunJob_4.hasMoreElements()) {
			String key_tRunJob_4 = (String) propertyNames_tRunJob_4.nextElement();
			Object value_tRunJob_4 = (Object) context.get(key_tRunJob_4);
			if(value_tRunJob_4!=null) {  
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + value_tRunJob_4);
			} else {
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_4 = null;

	
	
		ovirt_engine_dwh.parallelrun_4_5.ParallelRun childJob_tRunJob_4 = new ovirt_engine_dwh.parallelrun_4_5.ParallelRun();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
            if(childJob_tRunJob_4.getErrorCode() == null){
                globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
            }
            if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_4.getErrorCode());
                if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
                    java.lang.Exception ce_tRunJob_4 = childJob_tRunJob_4.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_4!=null) ? (ce_tRunJob_4.getClass().getName() + ": " + ce_tRunJob_4.getMessage()) : ""));
                }

 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJDBCConnection_8Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_8", false);
		start_Hash.put("tJDBCConnection_8", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_8";

	
		int tos_count_tJDBCConnection_8 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_8 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_8 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_8 = (String)(restRequest_tJDBCConnection_8 != null ? restRequest_tJDBCConnection_8.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_8 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_8 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_8 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_8 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_8.createRuntimeProperties();
 		                    props_tJDBCConnection_8.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_8.setValue("sharedConnectionName",
 		                    "engine-events");
 		                    
 		                    props_tJDBCConnection_8.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_8.setValue("autocommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_8.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_8.connection.setValue("driverClass",
 		                    context.ovirtEngineDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_8_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_8_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_8.connection.driverTable).setValue("drivers",tJDBCConnection_8_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_8.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_8.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineDbUser);
 		                    
 		                    props_tJDBCConnection_8.connection.userPassword.setValue("password",
 		                    context.ovirtEngineDbPassword);
 		                    
globalMap.put("tJDBCConnection_8_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_8);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_8= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_8_MAPPINGS_URL", mappings_url_tJDBCConnection_8);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_8 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_8";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_8 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_8 = null;
topology_tJDBCConnection_8 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_8 = def_tJDBCConnection_8.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_8, topology_tJDBCConnection_8);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_8 = def_tJDBCConnection_8.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_8 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_8.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_8 = componentRuntime_tJDBCConnection_8.initialize(container_tJDBCConnection_8, props_tJDBCConnection_8);

if (initVr_tJDBCConnection_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_8.getMessage());
}

if(componentRuntime_tJDBCConnection_8 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_8 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_8;
	compDriverInitialization_tJDBCConnection_8.runAtDriver(container_tJDBCConnection_8);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_8 = null;
if(componentRuntime_tJDBCConnection_8 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_8 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_8;
	if (doesNodeBelongToRequest_tJDBCConnection_8) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_8 = sourceOrSink_tJDBCConnection_8.validate(container_tJDBCConnection_8);
        if (vr_tJDBCConnection_8.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_8.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_8 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_8 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_8";

	


 


	tos_count_tJDBCConnection_8++;

/**
 * [tJDBCConnection_8 main ] stop
 */
	
	/**
	 * [tJDBCConnection_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_8";

	


 



/**
 * [tJDBCConnection_8 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_8";

	


 



/**
 * [tJDBCConnection_8 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_8 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_8";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_8", true);
end_Hash.put("tJDBCConnection_8", System.currentTimeMillis());




/**
 * [tJDBCConnection_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCConnection_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk91", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_8 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_8";

	
// finally of generic

 



/**
 * [tJDBCConnection_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_8_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public String time;

				public String getTime () {
					return this.time;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("time="+time);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";

	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public String getRandomtime() {
		
		return TalendDate.getDate("CCYY-MM-DD hh:mm:ss");
		
	}
	public String getRandommessage() {
		 
		return "ETL Service Stopped";
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row6.time = randtRowGenerator_1.getRandomtime();
		row6.message = randtRowGenerator_1.getRandommessage();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row6.time != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.time)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row6.message != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row6.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tRowGenerator_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";

	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfevent_outputStruct implements routines.system.IPersistableRow<copyOfevent_outputStruct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public java.util.Date log_time;

				public java.util.Date getLog_time () {
					return this.log_time;
				}
				
			    public String log_type_name;

				public String getLog_type_name () {
					return this.log_type_name;
				}
				
			    public int log_type;

				public int getLog_type () {
					return this.log_type;
				}
				
			    public int severity;

				public int getSeverity () {
					return this.severity;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.log_time = readDate(dis);
					
					this.log_type_name = readString(dis);
					
			        this.log_type = dis.readInt();
					
			        this.severity = dis.readInt();
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.log_time = readDate(dis);
					
					this.log_type_name = readString(dis);
					
			        this.log_type = dis.readInt();
					
			        this.severity = dis.readInt();
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.log_time,dos);
					
					// String
				
						writeString(this.log_type_name,dos);
					
					// int
				
		            	dos.writeInt(this.log_type);
					
					// int
				
		            	dos.writeInt(this.severity);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.log_time,dos);
					
					// String
				
						writeString(this.log_type_name,dos);
					
					// int
				
		            	dos.writeInt(this.log_type);
					
					// int
				
		            	dos.writeInt(this.severity);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("log_time="+String.valueOf(log_time));
		sb.append(",log_type_name="+log_type_name);
		sb.append(",log_type="+String.valueOf(log_type));
		sb.append(",severity="+String.valueOf(severity));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfevent_outputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public java.util.Date time;

				public java.util.Date getTime () {
					return this.time;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readDate(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readDate(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("time="+String.valueOf(time));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
copyOfevent_outputStruct copyOfevent_output = new copyOfevent_outputStruct();





	
	/**
	 * [tJDBCOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCOutput_2", false);
		start_Hash.put("tJDBCOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tJDBCOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfevent_output");
					}
				
		int tos_count_tJDBCOutput_2 = 0;
		

boolean doesNodeBelongToRequest_tJDBCOutput_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCOutput_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCOutput_2 = (String)(restRequest_tJDBCOutput_2 != null ? restRequest_tJDBCOutput_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCOutput_2 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCOutput_2 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCOutput_2 = null;


org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tJDBCOutput_2 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tJDBCOutput_2.createRuntimeProperties();
 		                    props_tJDBCOutput_2.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);
 		                    
 		                    props_tJDBCOutput_2.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tJDBCOutput_2.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tJDBCOutput_2.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tJDBCOutput_2.setValue("debug",
 		                    false);
 		                    
 		                    props_tJDBCOutput_2.setValue("useBatch",
 		                    true);
 		                    
 		                    props_tJDBCOutput_2.setValue("batchSize",
 		                    10000);
 		                    
 		                    props_tJDBCOutput_2.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCOutput_2.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_8");
 		                    
 		                    props_tJDBCOutput_2.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tJDBCOutput_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCOutput_2.tableSelection.setValue("tablename",
 		                    "audit_log");
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"audit_log\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_2\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_2_1_fisrt sst_tJDBCOutput_2_1_fisrt = new SchemaSettingTool_tJDBCOutput_2_1_fisrt();
 		                    
 		                    props_tJDBCOutput_2.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_2_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_2_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"audit_log\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_2\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_2_2_fisrt sst_tJDBCOutput_2_2_fisrt = new SchemaSettingTool_tJDBCOutput_2_2_fisrt();
 		                    
 		                    props_tJDBCOutput_2.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_2_2_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_2_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tJDBCOutput_2\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_2_3_fisrt sst_tJDBCOutput_2_3_fisrt = new SchemaSettingTool_tJDBCOutput_2_3_fisrt();
 		                    
 		                    props_tJDBCOutput_2.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_2_3_fisrt.getSchemaValue()));
 		                    
 		                    props_tJDBCOutput_2.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tJDBCOutput_2.additionalColumns.setValue("referenceColumns",
 		                    "log_time");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCOutput_2.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCOutput_2 = props_tJDBCOutput_2.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCOutput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCOutput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCOutput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCOutput_2.referencedComponent.setReference(referencedComponentProperties_tJDBCOutput_2);
        }
    }
globalMap.put("tJDBCOutput_2_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCOutput_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCOutput_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCOutput_2_MAPPINGS_URL", mappings_url_tJDBCOutput_2);

org.talend.components.api.container.RuntimeContainer container_tJDBCOutput_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCOutput_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCOutput_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCOutput_2 = null;
topology_tJDBCOutput_2 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCOutput_2 = def_tJDBCOutput_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCOutput_2, topology_tJDBCOutput_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCOutput_2 = def_tJDBCOutput_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCOutput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCOutput_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCOutput_2 = componentRuntime_tJDBCOutput_2.initialize(container_tJDBCOutput_2, props_tJDBCOutput_2);

if (initVr_tJDBCOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCOutput_2.getMessage());
}

if(componentRuntime_tJDBCOutput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCOutput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCOutput_2;
	compDriverInitialization_tJDBCOutput_2.runAtDriver(container_tJDBCOutput_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCOutput_2 = null;
if(componentRuntime_tJDBCOutput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCOutput_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCOutput_2;
	if (doesNodeBelongToRequest_tJDBCOutput_2) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCOutput_2 = sourceOrSink_tJDBCOutput_2.validate(container_tJDBCOutput_2);
        if (vr_tJDBCOutput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCOutput_2.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tJDBCOutput_2 = null;
    if (sourceOrSink_tJDBCOutput_2 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tJDBCOutput_2 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tJDBCOutput_2;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tJDBCOutput_2 = sink_tJDBCOutput_2.createWriteOperation();
        if (doesNodeBelongToRequest_tJDBCOutput_2) {
            writeOperation_tJDBCOutput_2.initialize(container_tJDBCOutput_2);
        }
        writer_tJDBCOutput_2 = writeOperation_tJDBCOutput_2.createWriter(container_tJDBCOutput_2);
        if (doesNodeBelongToRequest_tJDBCOutput_2) {
            writer_tJDBCOutput_2.open("tJDBCOutput_2");
        }

        resourceMap.put("writer_tJDBCOutput_2", writer_tJDBCOutput_2);
    } // end of "sourceOrSink_tJDBCOutput_2 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tJDBCOutput_2 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tJDBCOutput_2.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tJDBCOutput_2 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tJDBCOutput_2 = props_tJDBCOutput_2.getSchema(c_tJDBCOutput_2, false);
    incomingEnforcer_tJDBCOutput_2 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tJDBCOutput_2);

                java.lang.Iterable<?> outgoingMainRecordsList_tJDBCOutput_2 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tJDBCOutput_2 = null;


 



/**
 * [tJDBCOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfevent_outputStruct copyOfevent_output_tmp = new copyOfevent_outputStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_5", false);
		start_Hash.put("tRowGenerator_5", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_5";

	
		int tos_count_tRowGenerator_5 = 0;
		


int nb_line_tRowGenerator_5 = 0;
int nb_max_row_tRowGenerator_5 = 1;


class tRowGenerator_5Randomizer {
	public java.util.Date getRandomtime() {
		
		return TalendDate.getCurrentDate();
		
	}
	public String getRandommessage() {
		 
		return "ETL Service Stopped";
		
	}
}
	tRowGenerator_5Randomizer randtRowGenerator_5 = new tRowGenerator_5Randomizer();
	
	for (int itRowGenerator_5=0; itRowGenerator_5<nb_max_row_tRowGenerator_5 ;itRowGenerator_5++) {
		row2.time = randtRowGenerator_5.getRandomtime();
		row2.message = randtRowGenerator_5.getRandommessage();
		nb_line_tRowGenerator_5++;
		

 



/**
 * [tRowGenerator_5 begin ] stop
 */
	
	/**
	 * [tRowGenerator_5 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 


	tos_count_tRowGenerator_5++;

/**
 * [tRowGenerator_5 main ] stop
 */
	
	/**
	 * [tRowGenerator_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 



/**
 * [tRowGenerator_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfevent_output = null;


// # Output table : 'copyOfevent_output'
copyOfevent_output_tmp.log_time = row2.time ;
copyOfevent_output_tmp.log_type_name = "DWH_STOPPED";
copyOfevent_output_tmp.log_type = 9701;
copyOfevent_output_tmp.severity = 0;
copyOfevent_output_tmp.message = row2.message ;
copyOfevent_output = copyOfevent_output_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfevent_output"
if(copyOfevent_output != null) { 



	
	/**
	 * [tJDBCOutput_2 main ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfevent_output"
						
						);
					}
					

        if (incomingEnforcer_tJDBCOutput_2 != null) {
            incomingEnforcer_tJDBCOutput_2.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_2 != null && incomingEnforcer_tJDBCOutput_2.getRuntimeSchema().getField("log_time") != null){
                    incomingEnforcer_tJDBCOutput_2.put("log_time", copyOfevent_output.log_time);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_2 != null && incomingEnforcer_tJDBCOutput_2.getRuntimeSchema().getField("log_type_name") != null){
                    incomingEnforcer_tJDBCOutput_2.put("log_type_name", copyOfevent_output.log_type_name);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_2 != null && incomingEnforcer_tJDBCOutput_2.getRuntimeSchema().getField("log_type") != null){
                    incomingEnforcer_tJDBCOutput_2.put("log_type", copyOfevent_output.log_type);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_2 != null && incomingEnforcer_tJDBCOutput_2.getRuntimeSchema().getField("severity") != null){
                    incomingEnforcer_tJDBCOutput_2.put("severity", copyOfevent_output.severity);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_2 != null && incomingEnforcer_tJDBCOutput_2.getRuntimeSchema().getField("message") != null){
                    incomingEnforcer_tJDBCOutput_2.put("message", copyOfevent_output.message);
                }
        
        org.apache.avro.generic.IndexedRecord data_tJDBCOutput_2 = null;
        if (incomingEnforcer_tJDBCOutput_2 != null) {
            data_tJDBCOutput_2 = incomingEnforcer_tJDBCOutput_2.getCurrentRecord();
        }
        
        if (writer_tJDBCOutput_2 != null && data_tJDBCOutput_2 != null) {
        	writer_tJDBCOutput_2.write(data_tJDBCOutput_2);
        }
        
        nb_line_tJDBCOutput_2++;

 


	tos_count_tJDBCOutput_2++;

/**
 * [tJDBCOutput_2 main ] stop
 */
	
	/**
	 * [tJDBCOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_2";

	


 



/**
 * [tJDBCOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_2";

	


 



/**
 * [tJDBCOutput_2 process_data_end ] stop
 */

} // End of branch "copyOfevent_output"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 



/**
 * [tRowGenerator_5 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_5 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

}
globalMap.put("tRowGenerator_5_NB_LINE",nb_line_tRowGenerator_5);

 

ok_Hash.put("tRowGenerator_5", true);
end_Hash.put("tRowGenerator_5", System.currentTimeMillis());




/**
 * [tRowGenerator_5 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJDBCOutput_2 end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_2";

	
// end of generic


resourceMap.put("finish_tJDBCOutput_2", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tJDBCOutput_2 = null;
    if (writer_tJDBCOutput_2 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tJDBCOutput_2 = (org.talend.components.api.component.runtime.Result)writer_tJDBCOutput_2.close();
        resultMap_tJDBCOutput_2 = writer_tJDBCOutput_2.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tJDBCOutput_2), container_tJDBCOutput_2);
    }
if(resultMap_tJDBCOutput_2!=null) {
	for(java.util.Map.Entry<String,Object> entry_tJDBCOutput_2 : resultMap_tJDBCOutput_2.entrySet()) {
		switch(entry_tJDBCOutput_2.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tJDBCOutput_2.setComponentData("tJDBCOutput_2", "ERROR_MESSAGE", entry_tJDBCOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tJDBCOutput_2.setComponentData("tJDBCOutput_2", "NB_LINE", entry_tJDBCOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tJDBCOutput_2.setComponentData("tJDBCOutput_2", "NB_SUCCESS", entry_tJDBCOutput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tJDBCOutput_2.setComponentData("tJDBCOutput_2", "NB_REJECT", entry_tJDBCOutput_2.getValue());
			break;
		default :
            StringBuilder studio_key_tJDBCOutput_2 = new StringBuilder();
            for (int i_tJDBCOutput_2 = 0; i_tJDBCOutput_2 < entry_tJDBCOutput_2.getKey().length(); i_tJDBCOutput_2++) {
                char ch_tJDBCOutput_2 = entry_tJDBCOutput_2.getKey().charAt(i_tJDBCOutput_2);
                if(Character.isUpperCase(ch_tJDBCOutput_2) && i_tJDBCOutput_2> 0) {
                	studio_key_tJDBCOutput_2.append('_');
                }
                studio_key_tJDBCOutput_2.append(ch_tJDBCOutput_2);
            }
			container_tJDBCOutput_2.setComponentData("tJDBCOutput_2", studio_key_tJDBCOutput_2.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tJDBCOutput_2.getValue());
			break;
		}
	}
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfevent_output");
			  	}
			  	
 

ok_Hash.put("tJDBCOutput_2", true);
end_Hash.put("tJDBCOutput_2", System.currentTimeMillis());




/**
 * [tJDBCOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tRowGenerator_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_5 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_5";

	

 



/**
 * [tRowGenerator_5 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJDBCOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_2";

	
// finally of generic


if(resourceMap.get("finish_tJDBCOutput_2")==null){
    if(resourceMap.get("writer_tJDBCOutput_2")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tJDBCOutput_2")).close();
		} catch (java.io.IOException e_tJDBCOutput_2) {
			String errorMessage_tJDBCOutput_2 = "failed to release the resource in tJDBCOutput_2 :" + e_tJDBCOutput_2.getMessage();
			System.err.println(errorMessage_tJDBCOutput_2);
		}
	}
}
 



/**
 * [tJDBCOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_5_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String var_name;

				public String getVar_name () {
					return this.var_name;
				}
				
			    public String var_value;

				public String getVar_value () {
					return this.var_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.var_name == null) ? 0 : this.var_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.var_name == null) {
							if (other.var_name != null)
								return false;
						
						} else if (!this.var_name.equals(other.var_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.var_name = this.var_name;
	            other.var_value = this.var_value;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.var_name = this.var_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.var_name = readString(dis);
					
					this.var_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.var_name = readString(dis);
					
					this.var_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.var_name,dos);
					
					// String
				
						writeString(this.var_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.var_name,dos);
					
					// String
				
						writeString(this.var_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("var_name="+var_name);
		sb.append(",var_value="+var_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.var_name, other.var_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tJDBCOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCOutput_6", false);
		start_Hash.put("tJDBCOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tJDBCOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tJDBCOutput_6 = 0;
		

boolean doesNodeBelongToRequest_tJDBCOutput_6 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCOutput_6 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCOutput_6 = (String)(restRequest_tJDBCOutput_6 != null ? restRequest_tJDBCOutput_6.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCOutput_6 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCOutput_6 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCOutput_6 = null;


org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tJDBCOutput_6 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tJDBCOutput_6.createRuntimeProperties();
 		                    props_tJDBCOutput_6.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.UPDATE_OR_INSERT);
 		                    
 		                    props_tJDBCOutput_6.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tJDBCOutput_6.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tJDBCOutput_6.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tJDBCOutput_6.setValue("debug",
 		                    false);
 		                    
 		                    props_tJDBCOutput_6.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCOutput_6.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_8");
 		                    
 		                    props_tJDBCOutput_6.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tJDBCOutput_6.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCOutput_6.tableSelection.setValue("tablename",
 		                    "dwh_history_timekeeping");
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_6_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCOutput_6\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"var_name\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_name\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_name\",\"talend.field.isKey\":\"true\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"var_value\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_value\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_value\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_6\",\"di.table.label\":\"tJDBCOutput_6\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_6_1_fisrt sst_tJDBCOutput_6_1_fisrt = new SchemaSettingTool_tJDBCOutput_6_1_fisrt();
 		                    
 		                    props_tJDBCOutput_6.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_6_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_6_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCOutput_6\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"var_name\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_name\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_name\",\"talend.field.isKey\":\"true\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"var_value\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_value\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_value\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_6\",\"di.table.label\":\"tJDBCOutput_6\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_6_2_fisrt sst_tJDBCOutput_6_2_fisrt = new SchemaSettingTool_tJDBCOutput_6_2_fisrt();
 		                    
 		                    props_tJDBCOutput_6.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_6_2_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_6_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"var_name\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_name\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_name\",\"talend.field.isKey\":\"true\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"var_value\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_value\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_value\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tJDBCOutput_6\",\"di.table.label\":\"tJDBCOutput_6\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_6_3_fisrt sst_tJDBCOutput_6_3_fisrt = new SchemaSettingTool_tJDBCOutput_6_3_fisrt();
 		                    
 		                    props_tJDBCOutput_6.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_6_3_fisrt.getSchemaValue()));
 		                    
 		                    props_tJDBCOutput_6.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tJDBCOutput_6.additionalColumns.setValue("referenceColumns",
 		                    "var_name");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCOutput_6.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCOutput_6 = props_tJDBCOutput_6.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCOutput_6 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCOutput_6 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCOutput_6 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCOutput_6.referencedComponent.setReference(referencedComponentProperties_tJDBCOutput_6);
        }
    }
globalMap.put("tJDBCOutput_6_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCOutput_6);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCOutput_6= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCOutput_6_MAPPINGS_URL", mappings_url_tJDBCOutput_6);

org.talend.components.api.container.RuntimeContainer container_tJDBCOutput_6 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCOutput_6";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCOutput_6 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCOutput_6 = null;
topology_tJDBCOutput_6 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCOutput_6 = def_tJDBCOutput_6.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCOutput_6, topology_tJDBCOutput_6);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCOutput_6 = def_tJDBCOutput_6.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCOutput_6 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCOutput_6.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCOutput_6 = componentRuntime_tJDBCOutput_6.initialize(container_tJDBCOutput_6, props_tJDBCOutput_6);

if (initVr_tJDBCOutput_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCOutput_6.getMessage());
}

if(componentRuntime_tJDBCOutput_6 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCOutput_6 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCOutput_6;
	compDriverInitialization_tJDBCOutput_6.runAtDriver(container_tJDBCOutput_6);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCOutput_6 = null;
if(componentRuntime_tJDBCOutput_6 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCOutput_6 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCOutput_6;
	if (doesNodeBelongToRequest_tJDBCOutput_6) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCOutput_6 = sourceOrSink_tJDBCOutput_6.validate(container_tJDBCOutput_6);
        if (vr_tJDBCOutput_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCOutput_6.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tJDBCOutput_6 = null;
    if (sourceOrSink_tJDBCOutput_6 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tJDBCOutput_6 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tJDBCOutput_6;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tJDBCOutput_6 = sink_tJDBCOutput_6.createWriteOperation();
        if (doesNodeBelongToRequest_tJDBCOutput_6) {
            writeOperation_tJDBCOutput_6.initialize(container_tJDBCOutput_6);
        }
        writer_tJDBCOutput_6 = writeOperation_tJDBCOutput_6.createWriter(container_tJDBCOutput_6);
        if (doesNodeBelongToRequest_tJDBCOutput_6) {
            writer_tJDBCOutput_6.open("tJDBCOutput_6");
        }

        resourceMap.put("writer_tJDBCOutput_6", writer_tJDBCOutput_6);
    } // end of "sourceOrSink_tJDBCOutput_6 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tJDBCOutput_6 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tJDBCOutput_6.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tJDBCOutput_6 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tJDBCOutput_6 = props_tJDBCOutput_6.getSchema(c_tJDBCOutput_6, false);
    incomingEnforcer_tJDBCOutput_6 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tJDBCOutput_6);

                java.lang.Iterable<?> outgoingMainRecordsList_tJDBCOutput_6 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tJDBCOutput_6 = null;


 



/**
 * [tJDBCOutput_6 begin ] stop
 */



	
	/**
	 * [tRowGenerator_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_8", false);
		start_Hash.put("tRowGenerator_8", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_8";

	
		int tos_count_tRowGenerator_8 = 0;
		


int nb_line_tRowGenerator_8 = 0;
int nb_max_row_tRowGenerator_8 = 1;


class tRowGenerator_8Randomizer {
	public String getRandomvar_name() {
		 
		return "DwhCurrentlyRunning" ;
		
	}
	public String getRandomvar_value() {
		 
		return "0"  ;
		
	}
}
	tRowGenerator_8Randomizer randtRowGenerator_8 = new tRowGenerator_8Randomizer();
	
	for (int itRowGenerator_8=0; itRowGenerator_8<nb_max_row_tRowGenerator_8 ;itRowGenerator_8++) {
		row8.var_name = randtRowGenerator_8.getRandomvar_name();
		row8.var_value = randtRowGenerator_8.getRandomvar_value();
		nb_line_tRowGenerator_8++;
		

 



/**
 * [tRowGenerator_8 begin ] stop
 */
	
	/**
	 * [tRowGenerator_8 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 


	tos_count_tRowGenerator_8++;

/**
 * [tRowGenerator_8 main ] stop
 */
	
	/**
	 * [tRowGenerator_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 



/**
 * [tRowGenerator_8 process_data_begin ] stop
 */

	
	/**
	 * [tJDBCOutput_6 main ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

        if (incomingEnforcer_tJDBCOutput_6 != null) {
            incomingEnforcer_tJDBCOutput_6.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_6 != null && incomingEnforcer_tJDBCOutput_6.getRuntimeSchema().getField("var_name") != null){
                    incomingEnforcer_tJDBCOutput_6.put("var_name", row8.var_name);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_6 != null && incomingEnforcer_tJDBCOutput_6.getRuntimeSchema().getField("var_value") != null){
                    incomingEnforcer_tJDBCOutput_6.put("var_value", row8.var_value);
                }
        
        org.apache.avro.generic.IndexedRecord data_tJDBCOutput_6 = null;
        if (incomingEnforcer_tJDBCOutput_6 != null) {
            data_tJDBCOutput_6 = incomingEnforcer_tJDBCOutput_6.getCurrentRecord();
        }
        
        if (writer_tJDBCOutput_6 != null && data_tJDBCOutput_6 != null) {
        	writer_tJDBCOutput_6.write(data_tJDBCOutput_6);
        }
        
        nb_line_tJDBCOutput_6++;

 


	tos_count_tJDBCOutput_6++;

/**
 * [tJDBCOutput_6 main ] stop
 */
	
	/**
	 * [tJDBCOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_6";

	


 



/**
 * [tJDBCOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_6";

	


 



/**
 * [tJDBCOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 



/**
 * [tRowGenerator_8 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_8 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

}
globalMap.put("tRowGenerator_8_NB_LINE",nb_line_tRowGenerator_8);

 

ok_Hash.put("tRowGenerator_8", true);
end_Hash.put("tRowGenerator_8", System.currentTimeMillis());




/**
 * [tRowGenerator_8 end ] stop
 */

	
	/**
	 * [tJDBCOutput_6 end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_6";

	
// end of generic


resourceMap.put("finish_tJDBCOutput_6", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tJDBCOutput_6 = null;
    if (writer_tJDBCOutput_6 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tJDBCOutput_6 = (org.talend.components.api.component.runtime.Result)writer_tJDBCOutput_6.close();
        resultMap_tJDBCOutput_6 = writer_tJDBCOutput_6.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tJDBCOutput_6), container_tJDBCOutput_6);
    }
if(resultMap_tJDBCOutput_6!=null) {
	for(java.util.Map.Entry<String,Object> entry_tJDBCOutput_6 : resultMap_tJDBCOutput_6.entrySet()) {
		switch(entry_tJDBCOutput_6.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tJDBCOutput_6.setComponentData("tJDBCOutput_6", "ERROR_MESSAGE", entry_tJDBCOutput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tJDBCOutput_6.setComponentData("tJDBCOutput_6", "NB_LINE", entry_tJDBCOutput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tJDBCOutput_6.setComponentData("tJDBCOutput_6", "NB_SUCCESS", entry_tJDBCOutput_6.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tJDBCOutput_6.setComponentData("tJDBCOutput_6", "NB_REJECT", entry_tJDBCOutput_6.getValue());
			break;
		default :
            StringBuilder studio_key_tJDBCOutput_6 = new StringBuilder();
            for (int i_tJDBCOutput_6 = 0; i_tJDBCOutput_6 < entry_tJDBCOutput_6.getKey().length(); i_tJDBCOutput_6++) {
                char ch_tJDBCOutput_6 = entry_tJDBCOutput_6.getKey().charAt(i_tJDBCOutput_6);
                if(Character.isUpperCase(ch_tJDBCOutput_6) && i_tJDBCOutput_6> 0) {
                	studio_key_tJDBCOutput_6.append('_');
                }
                studio_key_tJDBCOutput_6.append(ch_tJDBCOutput_6);
            }
			container_tJDBCOutput_6.setComponentData("tJDBCOutput_6", studio_key_tJDBCOutput_6.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tJDBCOutput_6.getValue());
			break;
		}
	}
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tJDBCOutput_6", true);
end_Hash.put("tJDBCOutput_6", System.currentTimeMillis());




/**
 * [tJDBCOutput_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tJDBCRollback_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_8 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_8";

	

 



/**
 * [tRowGenerator_8 finally ] stop
 */

	
	/**
	 * [tJDBCOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_6";

	
// finally of generic


if(resourceMap.get("finish_tJDBCOutput_6")==null){
    if(resourceMap.get("writer_tJDBCOutput_6")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tJDBCOutput_6")).close();
		} catch (java.io.IOException e_tJDBCOutput_6) {
			String errorMessage_tJDBCOutput_6 = "failed to release the resource in tJDBCOutput_6 :" + e_tJDBCOutput_6.getMessage();
			System.err.println(errorMessage_tJDBCOutput_6);
		}
	}
}
 



/**
 * [tJDBCOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_8_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCRollback_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCRollback_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCRollback_1", false);
		start_Hash.put("tJDBCRollback_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCRollback_1";

	
		int tos_count_tJDBCRollback_1 = 0;
		

boolean doesNodeBelongToRequest_tJDBCRollback_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCRollback_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCRollback_1 = (String)(restRequest_tJDBCRollback_1 != null ? restRequest_tJDBCRollback_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCRollback_1 =
        new org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCRollback_1 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCRollback_1 = null;


org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties props_tJDBCRollback_1 =
        (org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties) def_tJDBCRollback_1.createRuntimeProperties();
 		                    props_tJDBCRollback_1.setValue("closeConnection",
 		                    true);
 		                    
 		                    props_tJDBCRollback_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCRollback_1.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_2");
 		                    
 		                    props_tJDBCRollback_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCRollback_1\",\"fields\":[],\"di.table.name\":\"tJDBCRollback_1\",\"di.table.label\":\"tJDBCRollback_1\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_1_1_fisrt sst_tJDBCRollback_1_1_fisrt = new SchemaSettingTool_tJDBCRollback_1_1_fisrt();
 		                    
 		                    props_tJDBCRollback_1.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_1_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_1_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_1_2_fisrt sst_tJDBCRollback_1_2_fisrt = new SchemaSettingTool_tJDBCRollback_1_2_fisrt();
 		                    
 		                    props_tJDBCRollback_1.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_1_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCRollback_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCRollback_1 = props_tJDBCRollback_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCRollback_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCRollback_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCRollback_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCRollback_1.referencedComponent.setReference(referencedComponentProperties_tJDBCRollback_1);
        }
    }
globalMap.put("tJDBCRollback_1_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCRollback_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCRollback_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCRollback_1_MAPPINGS_URL", mappings_url_tJDBCRollback_1);

org.talend.components.api.container.RuntimeContainer container_tJDBCRollback_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCRollback_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCRollback_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCRollback_1 = null;
topology_tJDBCRollback_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCRollback_1 = def_tJDBCRollback_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCRollback_1, topology_tJDBCRollback_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCRollback_1 = def_tJDBCRollback_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCRollback_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCRollback_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCRollback_1 = componentRuntime_tJDBCRollback_1.initialize(container_tJDBCRollback_1, props_tJDBCRollback_1);

if (initVr_tJDBCRollback_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCRollback_1.getMessage());
}

if(componentRuntime_tJDBCRollback_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCRollback_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCRollback_1;
	compDriverInitialization_tJDBCRollback_1.runAtDriver(container_tJDBCRollback_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCRollback_1 = null;
if(componentRuntime_tJDBCRollback_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCRollback_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCRollback_1;
	if (doesNodeBelongToRequest_tJDBCRollback_1) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCRollback_1 = sourceOrSink_tJDBCRollback_1.validate(container_tJDBCRollback_1);
        if (vr_tJDBCRollback_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCRollback_1.getMessage());
        }
	}
}

 



/**
 * [tJDBCRollback_1 begin ] stop
 */
	
	/**
	 * [tJDBCRollback_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_1";

	


 


	tos_count_tJDBCRollback_1++;

/**
 * [tJDBCRollback_1 main ] stop
 */
	
	/**
	 * [tJDBCRollback_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_1";

	


 



/**
 * [tJDBCRollback_1 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCRollback_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_1";

	


 



/**
 * [tJDBCRollback_1 process_data_end ] stop
 */
	
	/**
	 * [tJDBCRollback_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_1";

	
// end of generic


resourceMap.put("finish_tJDBCRollback_1", Boolean.TRUE);

 

ok_Hash.put("tJDBCRollback_1", true);
end_Hash.put("tJDBCRollback_1", System.currentTimeMillis());




/**
 * [tJDBCRollback_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCRollback_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJDBCRollback_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCRollback_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_1";

	
// finally of generic


if(resourceMap.get("finish_tJDBCRollback_1")==null){
}
 



/**
 * [tJDBCRollback_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCRollback_1_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCRollback_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCRollback_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCRollback_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCRollback_2", false);
		start_Hash.put("tJDBCRollback_2", System.currentTimeMillis());
		
	
	currentComponent="tJDBCRollback_2";

	
		int tos_count_tJDBCRollback_2 = 0;
		

boolean doesNodeBelongToRequest_tJDBCRollback_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCRollback_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCRollback_2 = (String)(restRequest_tJDBCRollback_2 != null ? restRequest_tJDBCRollback_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCRollback_2 =
        new org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCRollback_2 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCRollback_2 = null;


org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties props_tJDBCRollback_2 =
        (org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties) def_tJDBCRollback_2.createRuntimeProperties();
 		                    props_tJDBCRollback_2.setValue("closeConnection",
 		                    true);
 		                    
 		                    props_tJDBCRollback_2.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCRollback_2.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_1");
 		                    
 		                    props_tJDBCRollback_2.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCRollback_2\",\"fields\":[],\"di.table.name\":\"tJDBCRollback_2\",\"di.table.label\":\"tJDBCRollback_2\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_2_1_fisrt sst_tJDBCRollback_2_1_fisrt = new SchemaSettingTool_tJDBCRollback_2_1_fisrt();
 		                    
 		                    props_tJDBCRollback_2.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_2_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_2_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_2_2_fisrt sst_tJDBCRollback_2_2_fisrt = new SchemaSettingTool_tJDBCRollback_2_2_fisrt();
 		                    
 		                    props_tJDBCRollback_2.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_2_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCRollback_2.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCRollback_2 = props_tJDBCRollback_2.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCRollback_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCRollback_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCRollback_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCRollback_2.referencedComponent.setReference(referencedComponentProperties_tJDBCRollback_2);
        }
    }
globalMap.put("tJDBCRollback_2_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCRollback_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCRollback_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCRollback_2_MAPPINGS_URL", mappings_url_tJDBCRollback_2);

org.talend.components.api.container.RuntimeContainer container_tJDBCRollback_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCRollback_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCRollback_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCRollback_2 = null;
topology_tJDBCRollback_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCRollback_2 = def_tJDBCRollback_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCRollback_2, topology_tJDBCRollback_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCRollback_2 = def_tJDBCRollback_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCRollback_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCRollback_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCRollback_2 = componentRuntime_tJDBCRollback_2.initialize(container_tJDBCRollback_2, props_tJDBCRollback_2);

if (initVr_tJDBCRollback_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCRollback_2.getMessage());
}

if(componentRuntime_tJDBCRollback_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCRollback_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCRollback_2;
	compDriverInitialization_tJDBCRollback_2.runAtDriver(container_tJDBCRollback_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCRollback_2 = null;
if(componentRuntime_tJDBCRollback_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCRollback_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCRollback_2;
	if (doesNodeBelongToRequest_tJDBCRollback_2) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCRollback_2 = sourceOrSink_tJDBCRollback_2.validate(container_tJDBCRollback_2);
        if (vr_tJDBCRollback_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCRollback_2.getMessage());
        }
	}
}

 



/**
 * [tJDBCRollback_2 begin ] stop
 */
	
	/**
	 * [tJDBCRollback_2 main ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_2";

	


 


	tos_count_tJDBCRollback_2++;

/**
 * [tJDBCRollback_2 main ] stop
 */
	
	/**
	 * [tJDBCRollback_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_2";

	


 



/**
 * [tJDBCRollback_2 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCRollback_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_2";

	


 



/**
 * [tJDBCRollback_2 process_data_end ] stop
 */
	
	/**
	 * [tJDBCRollback_2 end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_2";

	
// end of generic


resourceMap.put("finish_tJDBCRollback_2", Boolean.TRUE);

 

ok_Hash.put("tJDBCRollback_2", true);
end_Hash.put("tJDBCRollback_2", System.currentTimeMillis());




/**
 * [tJDBCRollback_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCRollback_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk61", 0, "ok");
								} 
							
							tJDBCRollback_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCRollback_2 finally ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_2";

	
// finally of generic


if(resourceMap.get("finish_tJDBCRollback_2")==null){
}
 



/**
 * [tJDBCRollback_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCRollback_2_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCRollback_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCRollback_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCRollback_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCRollback_3", false);
		start_Hash.put("tJDBCRollback_3", System.currentTimeMillis());
		
	
	currentComponent="tJDBCRollback_3";

	
		int tos_count_tJDBCRollback_3 = 0;
		

boolean doesNodeBelongToRequest_tJDBCRollback_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCRollback_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCRollback_3 = (String)(restRequest_tJDBCRollback_3 != null ? restRequest_tJDBCRollback_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCRollback_3 =
        new org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCRollback_3 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCRollback_3 = null;


org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties props_tJDBCRollback_3 =
        (org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties) def_tJDBCRollback_3.createRuntimeProperties();
 		                    props_tJDBCRollback_3.setValue("closeConnection",
 		                    true);
 		                    
 		                    props_tJDBCRollback_3.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCRollback_3.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_3");
 		                    
 		                    props_tJDBCRollback_3.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCRollback_3\",\"fields\":[],\"di.table.name\":\"tJDBCRollback_3\",\"di.table.label\":\"tJDBCRollback_3\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_3_1_fisrt sst_tJDBCRollback_3_1_fisrt = new SchemaSettingTool_tJDBCRollback_3_1_fisrt();
 		                    
 		                    props_tJDBCRollback_3.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_3_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_3_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_3_2_fisrt sst_tJDBCRollback_3_2_fisrt = new SchemaSettingTool_tJDBCRollback_3_2_fisrt();
 		                    
 		                    props_tJDBCRollback_3.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_3_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCRollback_3.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCRollback_3 = props_tJDBCRollback_3.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCRollback_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCRollback_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCRollback_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCRollback_3.referencedComponent.setReference(referencedComponentProperties_tJDBCRollback_3);
        }
    }
globalMap.put("tJDBCRollback_3_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCRollback_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCRollback_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCRollback_3_MAPPINGS_URL", mappings_url_tJDBCRollback_3);

org.talend.components.api.container.RuntimeContainer container_tJDBCRollback_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCRollback_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCRollback_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCRollback_3 = null;
topology_tJDBCRollback_3 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCRollback_3 = def_tJDBCRollback_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCRollback_3, topology_tJDBCRollback_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCRollback_3 = def_tJDBCRollback_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCRollback_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCRollback_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCRollback_3 = componentRuntime_tJDBCRollback_3.initialize(container_tJDBCRollback_3, props_tJDBCRollback_3);

if (initVr_tJDBCRollback_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCRollback_3.getMessage());
}

if(componentRuntime_tJDBCRollback_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCRollback_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCRollback_3;
	compDriverInitialization_tJDBCRollback_3.runAtDriver(container_tJDBCRollback_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCRollback_3 = null;
if(componentRuntime_tJDBCRollback_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCRollback_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCRollback_3;
	if (doesNodeBelongToRequest_tJDBCRollback_3) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCRollback_3 = sourceOrSink_tJDBCRollback_3.validate(container_tJDBCRollback_3);
        if (vr_tJDBCRollback_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCRollback_3.getMessage());
        }
	}
}

 



/**
 * [tJDBCRollback_3 begin ] stop
 */
	
	/**
	 * [tJDBCRollback_3 main ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_3";

	


 


	tos_count_tJDBCRollback_3++;

/**
 * [tJDBCRollback_3 main ] stop
 */
	
	/**
	 * [tJDBCRollback_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_3";

	


 



/**
 * [tJDBCRollback_3 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCRollback_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_3";

	


 



/**
 * [tJDBCRollback_3 process_data_end ] stop
 */
	
	/**
	 * [tJDBCRollback_3 end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_3";

	
// end of generic


resourceMap.put("finish_tJDBCRollback_3", Boolean.TRUE);

 

ok_Hash.put("tJDBCRollback_3", true);
end_Hash.put("tJDBCRollback_3", System.currentTimeMillis());




/**
 * [tJDBCRollback_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCRollback_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tJDBCRollback_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCRollback_3 finally ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_3";

	
// finally of generic


if(resourceMap.get("finish_tJDBCRollback_3")==null){
}
 



/**
 * [tJDBCRollback_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCRollback_3_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCRollback_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCRollback_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCRollback_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCRollback_4", false);
		start_Hash.put("tJDBCRollback_4", System.currentTimeMillis());
		
	
	currentComponent="tJDBCRollback_4";

	
		int tos_count_tJDBCRollback_4 = 0;
		

boolean doesNodeBelongToRequest_tJDBCRollback_4 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCRollback_4 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCRollback_4 = (String)(restRequest_tJDBCRollback_4 != null ? restRequest_tJDBCRollback_4.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCRollback_4 =
        new org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCRollback_4 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCRollback_4 = null;


org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties props_tJDBCRollback_4 =
        (org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties) def_tJDBCRollback_4.createRuntimeProperties();
 		                    props_tJDBCRollback_4.setValue("closeConnection",
 		                    true);
 		                    
 		                    props_tJDBCRollback_4.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCRollback_4.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_4");
 		                    
 		                    props_tJDBCRollback_4.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_4_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCRollback_4\",\"fields\":[],\"di.table.name\":\"tJDBCRollback_4\",\"di.table.label\":\"tJDBCRollback_4\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_4_1_fisrt sst_tJDBCRollback_4_1_fisrt = new SchemaSettingTool_tJDBCRollback_4_1_fisrt();
 		                    
 		                    props_tJDBCRollback_4.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_4_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_4_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_4_2_fisrt sst_tJDBCRollback_4_2_fisrt = new SchemaSettingTool_tJDBCRollback_4_2_fisrt();
 		                    
 		                    props_tJDBCRollback_4.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_4_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCRollback_4.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCRollback_4 = props_tJDBCRollback_4.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCRollback_4 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCRollback_4 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCRollback_4 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCRollback_4.referencedComponent.setReference(referencedComponentProperties_tJDBCRollback_4);
        }
    }
globalMap.put("tJDBCRollback_4_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCRollback_4);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCRollback_4= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCRollback_4_MAPPINGS_URL", mappings_url_tJDBCRollback_4);

org.talend.components.api.container.RuntimeContainer container_tJDBCRollback_4 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCRollback_4";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCRollback_4 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCRollback_4 = null;
topology_tJDBCRollback_4 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCRollback_4 = def_tJDBCRollback_4.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCRollback_4, topology_tJDBCRollback_4);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCRollback_4 = def_tJDBCRollback_4.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCRollback_4 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCRollback_4.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCRollback_4 = componentRuntime_tJDBCRollback_4.initialize(container_tJDBCRollback_4, props_tJDBCRollback_4);

if (initVr_tJDBCRollback_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCRollback_4.getMessage());
}

if(componentRuntime_tJDBCRollback_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCRollback_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCRollback_4;
	compDriverInitialization_tJDBCRollback_4.runAtDriver(container_tJDBCRollback_4);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCRollback_4 = null;
if(componentRuntime_tJDBCRollback_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCRollback_4 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCRollback_4;
	if (doesNodeBelongToRequest_tJDBCRollback_4) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCRollback_4 = sourceOrSink_tJDBCRollback_4.validate(container_tJDBCRollback_4);
        if (vr_tJDBCRollback_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCRollback_4.getMessage());
        }
	}
}

 



/**
 * [tJDBCRollback_4 begin ] stop
 */
	
	/**
	 * [tJDBCRollback_4 main ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_4";

	


 


	tos_count_tJDBCRollback_4++;

/**
 * [tJDBCRollback_4 main ] stop
 */
	
	/**
	 * [tJDBCRollback_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_4";

	


 



/**
 * [tJDBCRollback_4 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCRollback_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_4";

	


 



/**
 * [tJDBCRollback_4 process_data_end ] stop
 */
	
	/**
	 * [tJDBCRollback_4 end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_4";

	
// end of generic


resourceMap.put("finish_tJDBCRollback_4", Boolean.TRUE);

 

ok_Hash.put("tJDBCRollback_4", true);
end_Hash.put("tJDBCRollback_4", System.currentTimeMillis());




/**
 * [tJDBCRollback_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCRollback_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJDBCRollback_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCRollback_4 finally ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_4";

	
// finally of generic


if(resourceMap.get("finish_tJDBCRollback_4")==null){
}
 



/**
 * [tJDBCRollback_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCRollback_4_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCRollback_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCRollback_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCRollback_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCRollback_5", false);
		start_Hash.put("tJDBCRollback_5", System.currentTimeMillis());
		
	
	currentComponent="tJDBCRollback_5";

	
		int tos_count_tJDBCRollback_5 = 0;
		

boolean doesNodeBelongToRequest_tJDBCRollback_5 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCRollback_5 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCRollback_5 = (String)(restRequest_tJDBCRollback_5 != null ? restRequest_tJDBCRollback_5.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCRollback_5 =
        new org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCRollback_5 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCRollback_5 = null;


org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties props_tJDBCRollback_5 =
        (org.talend.components.jdbc.tjdbcrollback.TJDBCRollbackProperties) def_tJDBCRollback_5.createRuntimeProperties();
 		                    props_tJDBCRollback_5.setValue("closeConnection",
 		                    true);
 		                    
 		                    props_tJDBCRollback_5.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCRollback_5.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_5");
 		                    
 		                    props_tJDBCRollback_5.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_5_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCRollback_5\",\"fields\":[],\"di.table.name\":\"tJDBCRollback_5\",\"di.table.label\":\"tJDBCRollback_5\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_5_1_fisrt sst_tJDBCRollback_5_1_fisrt = new SchemaSettingTool_tJDBCRollback_5_1_fisrt();
 		                    
 		                    props_tJDBCRollback_5.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_5_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCRollback_5_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"EmptyRecord\",\"fields\":[]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCRollback_5_2_fisrt sst_tJDBCRollback_5_2_fisrt = new SchemaSettingTool_tJDBCRollback_5_2_fisrt();
 		                    
 		                    props_tJDBCRollback_5.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCRollback_5_2_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCRollback_5.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCRollback_5 = props_tJDBCRollback_5.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCRollback_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCRollback_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCRollback_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCRollback_5.referencedComponent.setReference(referencedComponentProperties_tJDBCRollback_5);
        }
    }
globalMap.put("tJDBCRollback_5_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCRollback_5);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCRollback_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCRollback_5_MAPPINGS_URL", mappings_url_tJDBCRollback_5);

org.talend.components.api.container.RuntimeContainer container_tJDBCRollback_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCRollback_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCRollback_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCRollback_5 = null;
topology_tJDBCRollback_5 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCRollback_5 = def_tJDBCRollback_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCRollback_5, topology_tJDBCRollback_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCRollback_5 = def_tJDBCRollback_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCRollback_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCRollback_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCRollback_5 = componentRuntime_tJDBCRollback_5.initialize(container_tJDBCRollback_5, props_tJDBCRollback_5);

if (initVr_tJDBCRollback_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCRollback_5.getMessage());
}

if(componentRuntime_tJDBCRollback_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCRollback_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCRollback_5;
	compDriverInitialization_tJDBCRollback_5.runAtDriver(container_tJDBCRollback_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCRollback_5 = null;
if(componentRuntime_tJDBCRollback_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCRollback_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCRollback_5;
	if (doesNodeBelongToRequest_tJDBCRollback_5) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCRollback_5 = sourceOrSink_tJDBCRollback_5.validate(container_tJDBCRollback_5);
        if (vr_tJDBCRollback_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCRollback_5.getMessage());
        }
	}
}

 



/**
 * [tJDBCRollback_5 begin ] stop
 */
	
	/**
	 * [tJDBCRollback_5 main ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_5";

	


 


	tos_count_tJDBCRollback_5++;

/**
 * [tJDBCRollback_5 main ] stop
 */
	
	/**
	 * [tJDBCRollback_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_5";

	


 



/**
 * [tJDBCRollback_5 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCRollback_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_5";

	


 



/**
 * [tJDBCRollback_5 process_data_end ] stop
 */
	
	/**
	 * [tJDBCRollback_5 end ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_5";

	
// end of generic


resourceMap.put("finish_tJDBCRollback_5", Boolean.TRUE);

 

ok_Hash.put("tJDBCRollback_5", true);
end_Hash.put("tJDBCRollback_5", System.currentTimeMillis());




/**
 * [tJDBCRollback_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCRollback_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk25", 0, "ok");
								} 
							
							tJDBCClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCRollback_5 finally ] start
	 */

	

	
	
	currentComponent="tJDBCRollback_5";

	
// finally of generic


if(resourceMap.get("finish_tJDBCRollback_5")==null){
}
 



/**
 * [tJDBCRollback_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCRollback_5_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCClose_1", false);
		start_Hash.put("tJDBCClose_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCClose_1";

	
		int tos_count_tJDBCClose_1 = 0;
		

boolean doesNodeBelongToRequest_tJDBCClose_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCClose_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCClose_1 = (String)(restRequest_tJDBCClose_1 != null ? restRequest_tJDBCClose_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCClose_1 =
        new org.talend.components.jdbc.tjdbcclose.TJDBCCloseDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCClose_1 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCClose_1 = null;


org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties props_tJDBCClose_1 =
        (org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties) def_tJDBCClose_1.createRuntimeProperties();
 		                    props_tJDBCClose_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCClose_1.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_6");
 		                    
 		                    props_tJDBCClose_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCClose_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCClose_1 = props_tJDBCClose_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCClose_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCClose_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCClose_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCClose_1.referencedComponent.setReference(referencedComponentProperties_tJDBCClose_1);
        }
    }
globalMap.put("tJDBCClose_1_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCClose_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCClose_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCClose_1_MAPPINGS_URL", mappings_url_tJDBCClose_1);

org.talend.components.api.container.RuntimeContainer container_tJDBCClose_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCClose_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCClose_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCClose_1 = null;
topology_tJDBCClose_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCClose_1 = def_tJDBCClose_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCClose_1, topology_tJDBCClose_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCClose_1 = def_tJDBCClose_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCClose_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCClose_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCClose_1 = componentRuntime_tJDBCClose_1.initialize(container_tJDBCClose_1, props_tJDBCClose_1);

if (initVr_tJDBCClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCClose_1.getMessage());
}

if(componentRuntime_tJDBCClose_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCClose_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCClose_1;
	compDriverInitialization_tJDBCClose_1.runAtDriver(container_tJDBCClose_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCClose_1 = null;
if(componentRuntime_tJDBCClose_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCClose_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCClose_1;
	if (doesNodeBelongToRequest_tJDBCClose_1) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCClose_1 = sourceOrSink_tJDBCClose_1.validate(container_tJDBCClose_1);
        if (vr_tJDBCClose_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCClose_1.getMessage());
        }
	}
}

 



/**
 * [tJDBCClose_1 begin ] stop
 */
	
	/**
	 * [tJDBCClose_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCClose_1";

	


 


	tos_count_tJDBCClose_1++;

/**
 * [tJDBCClose_1 main ] stop
 */
	
	/**
	 * [tJDBCClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCClose_1";

	


 



/**
 * [tJDBCClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCClose_1";

	


 



/**
 * [tJDBCClose_1 process_data_end ] stop
 */
	
	/**
	 * [tJDBCClose_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCClose_1";

	
// end of generic

 

ok_Hash.put("tJDBCClose_1", true);
end_Hash.put("tJDBCClose_1", System.currentTimeMillis());




/**
 * [tJDBCClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tJDBCClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCClose_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCClose_1";

	
// finally of generic

 



/**
 * [tJDBCClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCClose_2", false);
		start_Hash.put("tJDBCClose_2", System.currentTimeMillis());
		
	
	currentComponent="tJDBCClose_2";

	
		int tos_count_tJDBCClose_2 = 0;
		

boolean doesNodeBelongToRequest_tJDBCClose_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCClose_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCClose_2 = (String)(restRequest_tJDBCClose_2 != null ? restRequest_tJDBCClose_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCClose_2 =
        new org.talend.components.jdbc.tjdbcclose.TJDBCCloseDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCClose_2 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCClose_2 = null;


org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties props_tJDBCClose_2 =
        (org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties) def_tJDBCClose_2.createRuntimeProperties();
 		                    props_tJDBCClose_2.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCClose_2.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_7");
 		                    
 		                    props_tJDBCClose_2.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCClose_2.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCClose_2 = props_tJDBCClose_2.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCClose_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCClose_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCClose_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCClose_2.referencedComponent.setReference(referencedComponentProperties_tJDBCClose_2);
        }
    }
globalMap.put("tJDBCClose_2_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCClose_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCClose_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCClose_2_MAPPINGS_URL", mappings_url_tJDBCClose_2);

org.talend.components.api.container.RuntimeContainer container_tJDBCClose_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCClose_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCClose_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCClose_2 = null;
topology_tJDBCClose_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCClose_2 = def_tJDBCClose_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCClose_2, topology_tJDBCClose_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCClose_2 = def_tJDBCClose_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCClose_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCClose_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCClose_2 = componentRuntime_tJDBCClose_2.initialize(container_tJDBCClose_2, props_tJDBCClose_2);

if (initVr_tJDBCClose_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCClose_2.getMessage());
}

if(componentRuntime_tJDBCClose_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCClose_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCClose_2;
	compDriverInitialization_tJDBCClose_2.runAtDriver(container_tJDBCClose_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCClose_2 = null;
if(componentRuntime_tJDBCClose_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCClose_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCClose_2;
	if (doesNodeBelongToRequest_tJDBCClose_2) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCClose_2 = sourceOrSink_tJDBCClose_2.validate(container_tJDBCClose_2);
        if (vr_tJDBCClose_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCClose_2.getMessage());
        }
	}
}

 



/**
 * [tJDBCClose_2 begin ] stop
 */
	
	/**
	 * [tJDBCClose_2 main ] start
	 */

	

	
	
	currentComponent="tJDBCClose_2";

	


 


	tos_count_tJDBCClose_2++;

/**
 * [tJDBCClose_2 main ] stop
 */
	
	/**
	 * [tJDBCClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCClose_2";

	


 



/**
 * [tJDBCClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCClose_2";

	


 



/**
 * [tJDBCClose_2 process_data_end ] stop
 */
	
	/**
	 * [tJDBCClose_2 end ] start
	 */

	

	
	
	currentComponent="tJDBCClose_2";

	
// end of generic

 

ok_Hash.put("tJDBCClose_2", true);
end_Hash.put("tJDBCClose_2", System.currentTimeMillis());




/**
 * [tJDBCClose_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJDBCClose_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
								} 
							
							tJDBCClose_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCClose_2 finally ] start
	 */

	

	
	
	currentComponent="tJDBCClose_2";

	
// finally of generic

 



/**
 * [tJDBCClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCClose_2_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCClose_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCClose_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJDBCClose_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCClose_3", false);
		start_Hash.put("tJDBCClose_3", System.currentTimeMillis());
		
	
	currentComponent="tJDBCClose_3";

	
		int tos_count_tJDBCClose_3 = 0;
		

boolean doesNodeBelongToRequest_tJDBCClose_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCClose_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCClose_3 = (String)(restRequest_tJDBCClose_3 != null ? restRequest_tJDBCClose_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCClose_3 =
        new org.talend.components.jdbc.tjdbcclose.TJDBCCloseDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCClose_3 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCClose_3 = null;


org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties props_tJDBCClose_3 =
        (org.talend.components.jdbc.tjdbcclose.TJDBCCloseProperties) def_tJDBCClose_3.createRuntimeProperties();
 		                    props_tJDBCClose_3.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCClose_3.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_8");
 		                    
 		                    props_tJDBCClose_3.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCClose_3.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCClose_3 = props_tJDBCClose_3.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCClose_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCClose_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCClose_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCClose_3.referencedComponent.setReference(referencedComponentProperties_tJDBCClose_3);
        }
    }
globalMap.put("tJDBCClose_3_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCClose_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCClose_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCClose_3_MAPPINGS_URL", mappings_url_tJDBCClose_3);

org.talend.components.api.container.RuntimeContainer container_tJDBCClose_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCClose_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCClose_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCClose_3 = null;
topology_tJDBCClose_3 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCClose_3 = def_tJDBCClose_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCClose_3, topology_tJDBCClose_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCClose_3 = def_tJDBCClose_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCClose_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCClose_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCClose_3 = componentRuntime_tJDBCClose_3.initialize(container_tJDBCClose_3, props_tJDBCClose_3);

if (initVr_tJDBCClose_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCClose_3.getMessage());
}

if(componentRuntime_tJDBCClose_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCClose_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCClose_3;
	compDriverInitialization_tJDBCClose_3.runAtDriver(container_tJDBCClose_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCClose_3 = null;
if(componentRuntime_tJDBCClose_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCClose_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCClose_3;
	if (doesNodeBelongToRequest_tJDBCClose_3) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCClose_3 = sourceOrSink_tJDBCClose_3.validate(container_tJDBCClose_3);
        if (vr_tJDBCClose_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCClose_3.getMessage());
        }
	}
}

 



/**
 * [tJDBCClose_3 begin ] stop
 */
	
	/**
	 * [tJDBCClose_3 main ] start
	 */

	

	
	
	currentComponent="tJDBCClose_3";

	


 


	tos_count_tJDBCClose_3++;

/**
 * [tJDBCClose_3 main ] stop
 */
	
	/**
	 * [tJDBCClose_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCClose_3";

	


 



/**
 * [tJDBCClose_3 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCClose_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCClose_3";

	


 



/**
 * [tJDBCClose_3 process_data_end ] stop
 */
	
	/**
	 * [tJDBCClose_3 end ] start
	 */

	

	
	
	currentComponent="tJDBCClose_3";

	
// end of generic

 

ok_Hash.put("tJDBCClose_3", true);
end_Hash.put("tJDBCClose_3", System.currentTimeMillis());




/**
 * [tJDBCClose_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCClose_3 finally ] start
	 */

	

	
	
	currentComponent="tJDBCClose_3";

	
// finally of generic

 



/**
 * [tJDBCClose_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCClose_3_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tLibraryLoad_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tLibraryLoad_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLibraryLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLibraryLoad_1", false);
		start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tLibraryLoad_1";

	
		int tos_count_tLibraryLoad_1 = 0;
		




 



/**
 * [tLibraryLoad_1 begin ] stop
 */
	
	/**
	 * [tLibraryLoad_1 main ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 


	tos_count_tLibraryLoad_1++;

/**
 * [tLibraryLoad_1 main ] stop
 */
	
	/**
	 * [tLibraryLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 



/**
 * [tLibraryLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tLibraryLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 



/**
 * [tLibraryLoad_1 process_data_end ] stop
 */
	
	/**
	 * [tLibraryLoad_1 end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 

ok_Hash.put("tLibraryLoad_1", true);
end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());




/**
 * [tLibraryLoad_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLibraryLoad_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tRowGenerator_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLibraryLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 



/**
 * [tLibraryLoad_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public String time;

				public String getTime () {
					return this.time;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("time="+time);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_2", false);
		start_Hash.put("tRowGenerator_2", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_2";

	
		int tos_count_tRowGenerator_2 = 0;
		


int nb_line_tRowGenerator_2 = 0;
int nb_max_row_tRowGenerator_2 = 1;


class tRowGenerator_2Randomizer {
	public String getRandomtime() {
		
		return TalendDate.getDate("CCYY-MM-DD hh:mm:ss");
		
	}
	public String getRandommessage() {
		 
		return "ETL Service Started" ;
		
	}
}
	tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();
	
	for (int itRowGenerator_2=0; itRowGenerator_2<nb_max_row_tRowGenerator_2 ;itRowGenerator_2++) {
		row3.time = randtRowGenerator_2.getRandomtime();
		row3.message = randtRowGenerator_2.getRandommessage();
		nb_line_tRowGenerator_2++;
		

 



/**
 * [tRowGenerator_2 begin ] stop
 */
	
	/**
	 * [tRowGenerator_2 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 


	tos_count_tRowGenerator_2++;

/**
 * [tRowGenerator_2 main ] stop
 */
	
	/**
	 * [tRowGenerator_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 



/**
 * [tRowGenerator_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row3.time != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row3.time)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row3.message != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row3.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 



/**
 * [tRowGenerator_2 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_2 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

}
globalMap.put("tRowGenerator_2_NB_LINE",nb_line_tRowGenerator_2);

 

ok_Hash.put("tRowGenerator_2", true);
end_Hash.put("tRowGenerator_2", System.currentTimeMillis());




/**
 * [tRowGenerator_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tFileInputProperties_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_2 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_2";

	

 



/**
 * [tRowGenerator_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputProperties_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputProperties_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputProperties_1", false);
		start_Hash.put("tFileInputProperties_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputProperties_1";

	
		int tos_count_tFileInputProperties_1 = 0;
		

	java.io.File file_tFileInputProperties_1 = new java.io.File(System.getProperty("org.ovirt.engine.dwh.settings"));
	int nb_line_tFileInputProperties_1 = 0;
	java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
	java.io.FileInputStream fis_tFileInputProperties_1=new java.io.FileInputStream(file_tFileInputProperties_1);
   	try{
		properties_tFileInputProperties_1.load(fis_tFileInputProperties_1);
		java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1.propertyNames();
		while (enumeration_tFileInputProperties_1.hasMoreElements()) {
			nb_line_tFileInputProperties_1++;
			row1.key = (String)enumeration_tFileInputProperties_1.nextElement();
			row1.value = (String)properties_tFileInputProperties_1.getProperty(row1.key);

 



/**
 * [tFileInputProperties_1 begin ] stop
 */
	
	/**
	 * [tFileInputProperties_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 


	tos_count_tFileInputProperties_1++;

/**
 * [tFileInputProperties_1 main ] stop
 */
	
	/**
	 * [tFileInputProperties_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_begin ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row1.key != null){
                          tmp_key_tContextLoad_1 = row1.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row1.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row1.key != null) {
                    key_tContextLoad_1 =
                        row1.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row1.value != null) {
                    value_tContextLoad_1 =
                        row1.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ((key_tContextLoad_1 != null) && ("ovirtEngineDbPassword".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ((key_tContextLoad_1 != null) && ("ovirtEngineHistoryDbPassword".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "deleteIncrement".equals(key_tContextLoad_1))
        {

                context.deleteIncrement=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "deleteMultiplier".equals(key_tContextLoad_1))
        {

                context.deleteMultiplier=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "dwhAggregationDebug".equals(key_tContextLoad_1))
        {
           context.dwhAggregationDebug=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "dwhUuid".equals(key_tContextLoad_1))
        {
           context.dwhUuid=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "etlVersion".equals(key_tContextLoad_1))
        {
           context.etlVersion=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "hoursToKeepDaily".equals(key_tContextLoad_1))
        {

                context.hoursToKeepDaily=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "hoursToKeepHourly".equals(key_tContextLoad_1))
        {

                context.hoursToKeepHourly=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "hoursToKeepSamples".equals(key_tContextLoad_1))
        {

                context.hoursToKeepSamples=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "lastErrorSent".equals(key_tContextLoad_1))
        {
                String context_lastErrorSent_value = context.getProperty("lastErrorSent");
                if(context_lastErrorSent_value==null)
                    context_lastErrorSent_value = "";
                int context_lastErrorSent_pos = context_lastErrorSent_value.indexOf(";");
                String context_lastErrorSent_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_lastErrorSent_pos > -1){
                    context_lastErrorSent_pattern = context_lastErrorSent_value.substring(0, context_lastErrorSent_pos);
                }
                context.lastErrorSent=(java.util.Date)(new java.text.SimpleDateFormat(context_lastErrorSent_pattern).parse(value_tContextLoad_1));

        }

        if(key_tContextLoad_1!=null && "ovirtEngineDbDriverClass".equals(key_tContextLoad_1))
        {
           context.ovirtEngineDbDriverClass=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ovirtEngineDbJdbcConnection".equals(key_tContextLoad_1))
        {
           context.ovirtEngineDbJdbcConnection=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ovirtEngineDbPassword".equals(key_tContextLoad_1))
        {
           context.ovirtEngineDbPassword=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ovirtEngineDbUser".equals(key_tContextLoad_1))
        {
           context.ovirtEngineDbUser=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ovirtEngineHistoryDbDriverClass".equals(key_tContextLoad_1))
        {
           context.ovirtEngineHistoryDbDriverClass=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ovirtEngineHistoryDbJdbcConnection".equals(key_tContextLoad_1))
        {
           context.ovirtEngineHistoryDbJdbcConnection=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ovirtEngineHistoryDbPassword".equals(key_tContextLoad_1))
        {
           context.ovirtEngineHistoryDbPassword=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ovirtEngineHistoryDbUser".equals(key_tContextLoad_1))
        {
           context.ovirtEngineHistoryDbUser=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "runDeleteTime".equals(key_tContextLoad_1))
        {

                context.runDeleteTime=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "runInterleave".equals(key_tContextLoad_1))
        {

                context.runInterleave=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "timeBetweenErrorEvents".equals(key_tContextLoad_1))
        {

               context.timeBetweenErrorEvents=Long.parseLong(value_tContextLoad_1);

        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
globalMap.put("tContextLoad_1_ERROR_MESSAGE",e.getMessage());
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */



	
	/**
	 * [tFileInputProperties_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputProperties_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

		}
	}finally{
		if(fis_tFileInputProperties_1!=null){
			fis_tFileInputProperties_1.close();
		}
	}
globalMap.put("tFileInputProperties_1_NB_LINE", nb_line_tFileInputProperties_1);
 

ok_Hash.put("tFileInputProperties_1", true);
end_Hash.put("tFileInputProperties_1", System.currentTimeMillis());




/**
 * [tFileInputProperties_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("ovirtEngineDbPassword");
		
		parametersToEncrypt_tContextLoad_1.add("ovirtEngineHistoryDbPassword");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputProperties_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tContextDump_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputProperties_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputProperties_1";

	

 



/**
 * [tFileInputProperties_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tContextDump_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tContextDump_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tContextDump_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextDump_1", false);
		start_Hash.put("tContextDump_1", System.currentTimeMillis());
		
	
	currentComponent="tContextDump_1";

	
		int tos_count_tContextDump_1 = 0;
		
        int nb_line_tContextDump_1 = 0;
        java.util.List<String> assignList_tContextDump_1 = new java.util.ArrayList<String>();
		
		
        for( java.util.Enumeration<?> en_tContextDump_1 = context.propertyNames() ; en_tContextDump_1.hasMoreElements() ; ) {        
            nb_line_tContextDump_1++;
            Object key_tContextDump_1 = en_tContextDump_1.nextElement();
            Object value_tContextDump_1 = context.getProperty(key_tContextDump_1.toString());
            if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(value_tContextDump_1)) {
            	value_tContextDump_1 = "";//keep the same result for parent and child job
            }
                    row10.key = key_tContextDump_1.toString();
					
						if (("id_Password").equals(context.getContextType(key_tContextDump_1.toString()))) {
							row10.value = value_tContextDump_1.toString().replaceAll(".","*");
						}
						else 
							
						row10.value = value_tContextDump_1.toString();
					
					
					
					
					
					
					
					
							if(("lastErrorSent").equals(key_tContextDump_1.toString())){
								if(value_tContextDump_1.toString().indexOf(";")>-1){
			                    	row10.value = value_tContextDump_1.toString().substring(value_tContextDump_1.toString().indexOf(";")+1);
			                    }
			                }
						
					
					
					
					
					
					
					
					
					
					
					
					
 



/**
 * [tContextDump_1 begin ] stop
 */
	
	/**
	 * [tContextDump_1 main ] start
	 */

	

	
	
	currentComponent="tContextDump_1";

	

 


	tos_count_tContextDump_1++;

/**
 * [tContextDump_1 main ] stop
 */
	
	/**
	 * [tContextDump_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextDump_1";

	

 



/**
 * [tContextDump_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row10.key != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row10.key)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row10.value != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row10.value)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */



	
	/**
	 * [tContextDump_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextDump_1";

	

 



/**
 * [tContextDump_1 process_data_end ] stop
 */
	
	/**
	 * [tContextDump_1 end ] start
	 */

	

	
	
	currentComponent="tContextDump_1";

	

        }
        globalMap.put("tContextDump_1_NB_LINE",nb_line_tContextDump_1);
 

ok_Hash.put("tContextDump_1", true);
end_Hash.put("tContextDump_1", System.currentTimeMillis());




/**
 * [tContextDump_1 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tContextDump_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tJDBCConnection_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tContextDump_1 finally ] start
	 */

	

	
	
	currentComponent="tContextDump_1";

	

 



/**
 * [tContextDump_1 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tContextDump_1_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_6", false);
		start_Hash.put("tJDBCConnection_6", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_6";

	
		int tos_count_tJDBCConnection_6 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_6 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_6 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_6 = (String)(restRequest_tJDBCConnection_6 != null ? restRequest_tJDBCConnection_6.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_6 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_6 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_6 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_6 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_6.createRuntimeProperties();
 		                    props_tJDBCConnection_6.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_6.setValue("sharedConnectionName",
 		                    "engine-events");
 		                    
 		                    props_tJDBCConnection_6.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_6.setValue("autocommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_6.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_6.connection.setValue("driverClass",
 		                    context.ovirtEngineDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_6_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_6_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_6.connection.driverTable).setValue("drivers",tJDBCConnection_6_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_6.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_6.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineDbUser);
 		                    
 		                    props_tJDBCConnection_6.connection.userPassword.setValue("password",
 		                    context.ovirtEngineDbPassword);
 		                    
globalMap.put("tJDBCConnection_6_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_6);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_6= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_6_MAPPINGS_URL", mappings_url_tJDBCConnection_6);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_6 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_6";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_6 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_6 = null;
topology_tJDBCConnection_6 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_6 = def_tJDBCConnection_6.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_6, topology_tJDBCConnection_6);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_6 = def_tJDBCConnection_6.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_6 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_6.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_6 = componentRuntime_tJDBCConnection_6.initialize(container_tJDBCConnection_6, props_tJDBCConnection_6);

if (initVr_tJDBCConnection_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_6.getMessage());
}

if(componentRuntime_tJDBCConnection_6 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_6 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_6;
	compDriverInitialization_tJDBCConnection_6.runAtDriver(container_tJDBCConnection_6);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_6 = null;
if(componentRuntime_tJDBCConnection_6 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_6 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_6;
	if (doesNodeBelongToRequest_tJDBCConnection_6) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_6 = sourceOrSink_tJDBCConnection_6.validate(container_tJDBCConnection_6);
        if (vr_tJDBCConnection_6.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_6.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_6 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_6 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_6";

	


 


	tos_count_tJDBCConnection_6++;

/**
 * [tJDBCConnection_6 main ] stop
 */
	
	/**
	 * [tJDBCConnection_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_6";

	


 



/**
 * [tJDBCConnection_6 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_6";

	


 



/**
 * [tJDBCConnection_6 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_6 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_6";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_6", true);
end_Hash.put("tJDBCConnection_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJDBCConnection_2Process(globalMap);



/**
 * [tJDBCConnection_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_6 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_6";

	
// finally of generic

 



/**
 * [tJDBCConnection_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_6_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_2", false);
		start_Hash.put("tJDBCConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_2";

	
		int tos_count_tJDBCConnection_2 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_2 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_2 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_2 = (String)(restRequest_tJDBCConnection_2 != null ? restRequest_tJDBCConnection_2.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_2 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_2 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_2 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_2 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_2.createRuntimeProperties();
 		                    props_tJDBCConnection_2.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_2.setValue("sharedConnectionName",
 		                    "engine");
 		                    
 		                    props_tJDBCConnection_2.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_2.setValue("autocommit",
 		                    false);
 		                    
 		                    props_tJDBCConnection_2.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_2.connection.setValue("driverClass",
 		                    context.ovirtEngineDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_2_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_2_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_2.connection.driverTable).setValue("drivers",tJDBCConnection_2_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_2.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineDbUser);
 		                    
 		                    props_tJDBCConnection_2.connection.userPassword.setValue("password",
 		                    context.ovirtEngineDbPassword);
 		                    
globalMap.put("tJDBCConnection_2_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_2_MAPPINGS_URL", mappings_url_tJDBCConnection_2);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_2 = null;
topology_tJDBCConnection_2 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_2 = def_tJDBCConnection_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_2, topology_tJDBCConnection_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_2 = def_tJDBCConnection_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_2 = componentRuntime_tJDBCConnection_2.initialize(container_tJDBCConnection_2, props_tJDBCConnection_2);

if (initVr_tJDBCConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_2.getMessage());
}

if(componentRuntime_tJDBCConnection_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_2;
	compDriverInitialization_tJDBCConnection_2.runAtDriver(container_tJDBCConnection_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_2 = null;
if(componentRuntime_tJDBCConnection_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_2;
	if (doesNodeBelongToRequest_tJDBCConnection_2) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_2 = sourceOrSink_tJDBCConnection_2.validate(container_tJDBCConnection_2);
        if (vr_tJDBCConnection_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_2.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_2 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_2 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	


 


	tos_count_tJDBCConnection_2++;

/**
 * [tJDBCConnection_2 main ] stop
 */
	
	/**
	 * [tJDBCConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	


 



/**
 * [tJDBCConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	


 



/**
 * [tJDBCConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_2 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_2", true);
end_Hash.put("tJDBCConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tRowGenerator_6Process(globalMap);



/**
 * [tJDBCConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_2";

	
// finally of generic

 



/**
 * [tJDBCConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfevent_output_0Struct implements routines.system.IPersistableRow<copyOfevent_output_0Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public java.util.Date log_time;

				public java.util.Date getLog_time () {
					return this.log_time;
				}
				
			    public String log_type_name;

				public String getLog_type_name () {
					return this.log_type_name;
				}
				
			    public int log_type;

				public int getLog_type () {
					return this.log_type;
				}
				
			    public int severity;

				public int getSeverity () {
					return this.severity;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.log_time = readDate(dis);
					
					this.log_type_name = readString(dis);
					
			        this.log_type = dis.readInt();
					
			        this.severity = dis.readInt();
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.log_time = readDate(dis);
					
					this.log_type_name = readString(dis);
					
			        this.log_type = dis.readInt();
					
			        this.severity = dis.readInt();
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.log_time,dos);
					
					// String
				
						writeString(this.log_type_name,dos);
					
					// int
				
		            	dos.writeInt(this.log_type);
					
					// int
				
		            	dos.writeInt(this.severity);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.log_time,dos);
					
					// String
				
						writeString(this.log_type_name,dos);
					
					// int
				
		            	dos.writeInt(this.log_type);
					
					// int
				
		            	dos.writeInt(this.severity);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("log_time="+String.valueOf(log_time));
		sb.append(",log_type_name="+log_type_name);
		sb.append(",log_type="+String.valueOf(log_type));
		sb.append(",severity="+String.valueOf(severity));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfevent_output_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public java.util.Date time;

				public java.util.Date getTime () {
					return this.time;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readDate(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.time = readDate(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.time,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("time="+String.valueOf(time));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
copyOfevent_output_0Struct copyOfevent_output_0 = new copyOfevent_output_0Struct();





	
	/**
	 * [tJDBCOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCOutput_3", false);
		start_Hash.put("tJDBCOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tJDBCOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfevent_output_0");
					}
				
		int tos_count_tJDBCOutput_3 = 0;
		

boolean doesNodeBelongToRequest_tJDBCOutput_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCOutput_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCOutput_3 = (String)(restRequest_tJDBCOutput_3 != null ? restRequest_tJDBCOutput_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCOutput_3 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCOutput_3 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCOutput_3 = null;


org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tJDBCOutput_3 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tJDBCOutput_3.createRuntimeProperties();
 		                    props_tJDBCOutput_3.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);
 		                    
 		                    props_tJDBCOutput_3.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tJDBCOutput_3.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tJDBCOutput_3.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tJDBCOutput_3.setValue("debug",
 		                    false);
 		                    
 		                    props_tJDBCOutput_3.setValue("useBatch",
 		                    true);
 		                    
 		                    props_tJDBCOutput_3.setValue("batchSize",
 		                    10000);
 		                    
 		                    props_tJDBCOutput_3.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCOutput_3.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_6");
 		                    
 		                    props_tJDBCOutput_3.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tJDBCOutput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCOutput_3.tableSelection.setValue("tablename",
 		                    "audit_log");
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"audit_log\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_3\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_3_1_fisrt sst_tJDBCOutput_3_1_fisrt = new SchemaSettingTool_tJDBCOutput_3_1_fisrt();
 		                    
 		                    props_tJDBCOutput_3.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_3_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_3_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"audit_log\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_3\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_3_2_fisrt sst_tJDBCOutput_3_2_fisrt = new SchemaSettingTool_tJDBCOutput_3_2_fisrt();
 		                    
 		                    props_tJDBCOutput_3.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_3_2_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_3_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tJDBCOutput_3\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_3_3_fisrt sst_tJDBCOutput_3_3_fisrt = new SchemaSettingTool_tJDBCOutput_3_3_fisrt();
 		                    
 		                    props_tJDBCOutput_3.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_3_3_fisrt.getSchemaValue()));
 		                    
 		                    props_tJDBCOutput_3.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tJDBCOutput_3.additionalColumns.setValue("referenceColumns",
 		                    "log_time");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCOutput_3.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCOutput_3 = props_tJDBCOutput_3.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCOutput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCOutput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCOutput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCOutput_3.referencedComponent.setReference(referencedComponentProperties_tJDBCOutput_3);
        }
    }
globalMap.put("tJDBCOutput_3_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCOutput_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCOutput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCOutput_3_MAPPINGS_URL", mappings_url_tJDBCOutput_3);

org.talend.components.api.container.RuntimeContainer container_tJDBCOutput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCOutput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCOutput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCOutput_3 = null;
topology_tJDBCOutput_3 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCOutput_3 = def_tJDBCOutput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCOutput_3, topology_tJDBCOutput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCOutput_3 = def_tJDBCOutput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCOutput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCOutput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCOutput_3 = componentRuntime_tJDBCOutput_3.initialize(container_tJDBCOutput_3, props_tJDBCOutput_3);

if (initVr_tJDBCOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCOutput_3.getMessage());
}

if(componentRuntime_tJDBCOutput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCOutput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCOutput_3;
	compDriverInitialization_tJDBCOutput_3.runAtDriver(container_tJDBCOutput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCOutput_3 = null;
if(componentRuntime_tJDBCOutput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCOutput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCOutput_3;
	if (doesNodeBelongToRequest_tJDBCOutput_3) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCOutput_3 = sourceOrSink_tJDBCOutput_3.validate(container_tJDBCOutput_3);
        if (vr_tJDBCOutput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCOutput_3.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tJDBCOutput_3 = null;
    if (sourceOrSink_tJDBCOutput_3 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tJDBCOutput_3 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tJDBCOutput_3;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tJDBCOutput_3 = sink_tJDBCOutput_3.createWriteOperation();
        if (doesNodeBelongToRequest_tJDBCOutput_3) {
            writeOperation_tJDBCOutput_3.initialize(container_tJDBCOutput_3);
        }
        writer_tJDBCOutput_3 = writeOperation_tJDBCOutput_3.createWriter(container_tJDBCOutput_3);
        if (doesNodeBelongToRequest_tJDBCOutput_3) {
            writer_tJDBCOutput_3.open("tJDBCOutput_3");
        }

        resourceMap.put("writer_tJDBCOutput_3", writer_tJDBCOutput_3);
    } // end of "sourceOrSink_tJDBCOutput_3 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tJDBCOutput_3 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tJDBCOutput_3.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tJDBCOutput_3 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tJDBCOutput_3 = props_tJDBCOutput_3.getSchema(c_tJDBCOutput_3, false);
    incomingEnforcer_tJDBCOutput_3 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tJDBCOutput_3);

                java.lang.Iterable<?> outgoingMainRecordsList_tJDBCOutput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tJDBCOutput_3 = null;


 



/**
 * [tJDBCOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfevent_output_0Struct copyOfevent_output_0_tmp = new copyOfevent_output_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tRowGenerator_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_6", false);
		start_Hash.put("tRowGenerator_6", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_6";

	
		int tos_count_tRowGenerator_6 = 0;
		


int nb_line_tRowGenerator_6 = 0;
int nb_max_row_tRowGenerator_6 = 1;


class tRowGenerator_6Randomizer {
	public java.util.Date getRandomtime() {
		
		return TalendDate.getCurrentDate();
		
	}
	public String getRandommessage() {
		 
		return "ETL Service Started" ;
		
	}
}
	tRowGenerator_6Randomizer randtRowGenerator_6 = new tRowGenerator_6Randomizer();
	
	for (int itRowGenerator_6=0; itRowGenerator_6<nb_max_row_tRowGenerator_6 ;itRowGenerator_6++) {
		row7.time = randtRowGenerator_6.getRandomtime();
		row7.message = randtRowGenerator_6.getRandommessage();
		nb_line_tRowGenerator_6++;
		

 



/**
 * [tRowGenerator_6 begin ] stop
 */
	
	/**
	 * [tRowGenerator_6 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 


	tos_count_tRowGenerator_6++;

/**
 * [tRowGenerator_6 main ] stop
 */
	
	/**
	 * [tRowGenerator_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 



/**
 * [tRowGenerator_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfevent_output_0 = null;


// # Output table : 'copyOfevent_output_0'
copyOfevent_output_0_tmp.log_time = row7.time ;
copyOfevent_output_0_tmp.log_type_name = "DWH_STARTED";
copyOfevent_output_0_tmp.log_type = 9700;
copyOfevent_output_0_tmp.severity = 0;
copyOfevent_output_0_tmp.message = row7.message ;
copyOfevent_output_0 = copyOfevent_output_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfevent_output_0"
if(copyOfevent_output_0 != null) { 



	
	/**
	 * [tJDBCOutput_3 main ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfevent_output_0"
						
						);
					}
					

        if (incomingEnforcer_tJDBCOutput_3 != null) {
            incomingEnforcer_tJDBCOutput_3.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_3 != null && incomingEnforcer_tJDBCOutput_3.getRuntimeSchema().getField("log_time") != null){
                    incomingEnforcer_tJDBCOutput_3.put("log_time", copyOfevent_output_0.log_time);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_3 != null && incomingEnforcer_tJDBCOutput_3.getRuntimeSchema().getField("log_type_name") != null){
                    incomingEnforcer_tJDBCOutput_3.put("log_type_name", copyOfevent_output_0.log_type_name);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_3 != null && incomingEnforcer_tJDBCOutput_3.getRuntimeSchema().getField("log_type") != null){
                    incomingEnforcer_tJDBCOutput_3.put("log_type", copyOfevent_output_0.log_type);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_3 != null && incomingEnforcer_tJDBCOutput_3.getRuntimeSchema().getField("severity") != null){
                    incomingEnforcer_tJDBCOutput_3.put("severity", copyOfevent_output_0.severity);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_3 != null && incomingEnforcer_tJDBCOutput_3.getRuntimeSchema().getField("message") != null){
                    incomingEnforcer_tJDBCOutput_3.put("message", copyOfevent_output_0.message);
                }
        
        org.apache.avro.generic.IndexedRecord data_tJDBCOutput_3 = null;
        if (incomingEnforcer_tJDBCOutput_3 != null) {
            data_tJDBCOutput_3 = incomingEnforcer_tJDBCOutput_3.getCurrentRecord();
        }
        
        if (writer_tJDBCOutput_3 != null && data_tJDBCOutput_3 != null) {
        	writer_tJDBCOutput_3.write(data_tJDBCOutput_3);
        }
        
        nb_line_tJDBCOutput_3++;

 


	tos_count_tJDBCOutput_3++;

/**
 * [tJDBCOutput_3 main ] stop
 */
	
	/**
	 * [tJDBCOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_3";

	


 



/**
 * [tJDBCOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_3";

	


 



/**
 * [tJDBCOutput_3 process_data_end ] stop
 */

} // End of branch "copyOfevent_output_0"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 



/**
 * [tRowGenerator_6 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_6 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

}
globalMap.put("tRowGenerator_6_NB_LINE",nb_line_tRowGenerator_6);

 

ok_Hash.put("tRowGenerator_6", true);
end_Hash.put("tRowGenerator_6", System.currentTimeMillis());




/**
 * [tRowGenerator_6 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tJDBCOutput_3 end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_3";

	
// end of generic


resourceMap.put("finish_tJDBCOutput_3", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tJDBCOutput_3 = null;
    if (writer_tJDBCOutput_3 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tJDBCOutput_3 = (org.talend.components.api.component.runtime.Result)writer_tJDBCOutput_3.close();
        resultMap_tJDBCOutput_3 = writer_tJDBCOutput_3.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tJDBCOutput_3), container_tJDBCOutput_3);
    }
if(resultMap_tJDBCOutput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tJDBCOutput_3 : resultMap_tJDBCOutput_3.entrySet()) {
		switch(entry_tJDBCOutput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tJDBCOutput_3.setComponentData("tJDBCOutput_3", "ERROR_MESSAGE", entry_tJDBCOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tJDBCOutput_3.setComponentData("tJDBCOutput_3", "NB_LINE", entry_tJDBCOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tJDBCOutput_3.setComponentData("tJDBCOutput_3", "NB_SUCCESS", entry_tJDBCOutput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tJDBCOutput_3.setComponentData("tJDBCOutput_3", "NB_REJECT", entry_tJDBCOutput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tJDBCOutput_3 = new StringBuilder();
            for (int i_tJDBCOutput_3 = 0; i_tJDBCOutput_3 < entry_tJDBCOutput_3.getKey().length(); i_tJDBCOutput_3++) {
                char ch_tJDBCOutput_3 = entry_tJDBCOutput_3.getKey().charAt(i_tJDBCOutput_3);
                if(Character.isUpperCase(ch_tJDBCOutput_3) && i_tJDBCOutput_3> 0) {
                	studio_key_tJDBCOutput_3.append('_');
                }
                studio_key_tJDBCOutput_3.append(ch_tJDBCOutput_3);
            }
			container_tJDBCOutput_3.setComponentData("tJDBCOutput_3", studio_key_tJDBCOutput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tJDBCOutput_3.getValue());
			break;
		}
	}
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfevent_output_0");
			  	}
			  	
 

ok_Hash.put("tJDBCOutput_3", true);
end_Hash.put("tJDBCOutput_3", System.currentTimeMillis());




/**
 * [tJDBCOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tRowGenerator_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_6 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_6";

	

 



/**
 * [tRowGenerator_6 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tJDBCOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_3";

	
// finally of generic


if(resourceMap.get("finish_tJDBCOutput_3")==null){
    if(resourceMap.get("writer_tJDBCOutput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tJDBCOutput_3")).close();
		} catch (java.io.IOException e_tJDBCOutput_3) {
			String errorMessage_tJDBCOutput_3 = "failed to release the resource in tJDBCOutput_3 :" + e_tJDBCOutput_3.getMessage();
			System.err.println(errorMessage_tJDBCOutput_3);
		}
	}
}
 



/**
 * [tJDBCOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_6_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String var_name;

				public String getVar_name () {
					return this.var_name;
				}
				
			    public String var_value;

				public String getVar_value () {
					return this.var_value;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.var_name == null) ? 0 : this.var_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.var_name == null) {
							if (other.var_name != null)
								return false;
						
						} else if (!this.var_name.equals(other.var_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.var_name = this.var_name;
	            other.var_value = this.var_value;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.var_name = this.var_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.var_name = readString(dis);
					
					this.var_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.var_name = readString(dis);
					
					this.var_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.var_name,dos);
					
					// String
				
						writeString(this.var_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.var_name,dos);
					
					// String
				
						writeString(this.var_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("var_name="+var_name);
		sb.append(",var_value="+var_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.var_name, other.var_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRowGenerator_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tJDBCOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCOutput_5", false);
		start_Hash.put("tJDBCOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tJDBCOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJDBCOutput_5 = 0;
		

boolean doesNodeBelongToRequest_tJDBCOutput_5 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCOutput_5 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCOutput_5 = (String)(restRequest_tJDBCOutput_5 != null ? restRequest_tJDBCOutput_5.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCOutput_5 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCOutput_5 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCOutput_5 = null;


org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tJDBCOutput_5 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tJDBCOutput_5.createRuntimeProperties();
 		                    props_tJDBCOutput_5.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.UPDATE_OR_INSERT);
 		                    
 		                    props_tJDBCOutput_5.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tJDBCOutput_5.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tJDBCOutput_5.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tJDBCOutput_5.setValue("debug",
 		                    false);
 		                    
 		                    props_tJDBCOutput_5.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCOutput_5.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_6");
 		                    
 		                    props_tJDBCOutput_5.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tJDBCOutput_5.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCOutput_5.tableSelection.setValue("tablename",
 		                    "dwh_history_timekeeping");
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_5_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCOutput_5\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"var_name\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_name\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_name\",\"talend.field.isKey\":\"true\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"var_value\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_value\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_value\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_5\",\"di.table.label\":\"tJDBCOutput_5\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_5_1_fisrt sst_tJDBCOutput_5_1_fisrt = new SchemaSettingTool_tJDBCOutput_5_1_fisrt();
 		                    
 		                    props_tJDBCOutput_5.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_5_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_5_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCOutput_5\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"var_name\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_name\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_name\",\"talend.field.isKey\":\"true\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"var_value\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_value\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_value\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_5\",\"di.table.label\":\"tJDBCOutput_5\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_5_2_fisrt sst_tJDBCOutput_5_2_fisrt = new SchemaSettingTool_tJDBCOutput_5_2_fisrt();
 		                    
 		                    props_tJDBCOutput_5.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_5_2_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_5_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"var_name\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_name\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"dd-MM-yyyy\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_name\",\"talend.field.isKey\":\"true\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"var_value\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"var_value\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"var_value\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tJDBCOutput_5\",\"di.table.label\":\"tJDBCOutput_5\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_5_3_fisrt sst_tJDBCOutput_5_3_fisrt = new SchemaSettingTool_tJDBCOutput_5_3_fisrt();
 		                    
 		                    props_tJDBCOutput_5.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_5_3_fisrt.getSchemaValue()));
 		                    
 		                    props_tJDBCOutput_5.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tJDBCOutput_5.additionalColumns.setValue("referenceColumns",
 		                    "var_name");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCOutput_5.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCOutput_5 = props_tJDBCOutput_5.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCOutput_5 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCOutput_5 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCOutput_5 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCOutput_5.referencedComponent.setReference(referencedComponentProperties_tJDBCOutput_5);
        }
    }
globalMap.put("tJDBCOutput_5_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCOutput_5);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCOutput_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCOutput_5_MAPPINGS_URL", mappings_url_tJDBCOutput_5);

org.talend.components.api.container.RuntimeContainer container_tJDBCOutput_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCOutput_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCOutput_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCOutput_5 = null;
topology_tJDBCOutput_5 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCOutput_5 = def_tJDBCOutput_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCOutput_5, topology_tJDBCOutput_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCOutput_5 = def_tJDBCOutput_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCOutput_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCOutput_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCOutput_5 = componentRuntime_tJDBCOutput_5.initialize(container_tJDBCOutput_5, props_tJDBCOutput_5);

if (initVr_tJDBCOutput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCOutput_5.getMessage());
}

if(componentRuntime_tJDBCOutput_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCOutput_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCOutput_5;
	compDriverInitialization_tJDBCOutput_5.runAtDriver(container_tJDBCOutput_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCOutput_5 = null;
if(componentRuntime_tJDBCOutput_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCOutput_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCOutput_5;
	if (doesNodeBelongToRequest_tJDBCOutput_5) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCOutput_5 = sourceOrSink_tJDBCOutput_5.validate(container_tJDBCOutput_5);
        if (vr_tJDBCOutput_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCOutput_5.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tJDBCOutput_5 = null;
    if (sourceOrSink_tJDBCOutput_5 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tJDBCOutput_5 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tJDBCOutput_5;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tJDBCOutput_5 = sink_tJDBCOutput_5.createWriteOperation();
        if (doesNodeBelongToRequest_tJDBCOutput_5) {
            writeOperation_tJDBCOutput_5.initialize(container_tJDBCOutput_5);
        }
        writer_tJDBCOutput_5 = writeOperation_tJDBCOutput_5.createWriter(container_tJDBCOutput_5);
        if (doesNodeBelongToRequest_tJDBCOutput_5) {
            writer_tJDBCOutput_5.open("tJDBCOutput_5");
        }

        resourceMap.put("writer_tJDBCOutput_5", writer_tJDBCOutput_5);
    } // end of "sourceOrSink_tJDBCOutput_5 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tJDBCOutput_5 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tJDBCOutput_5.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tJDBCOutput_5 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tJDBCOutput_5 = props_tJDBCOutput_5.getSchema(c_tJDBCOutput_5, false);
    incomingEnforcer_tJDBCOutput_5 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tJDBCOutput_5);

                java.lang.Iterable<?> outgoingMainRecordsList_tJDBCOutput_5 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tJDBCOutput_5 = null;


 



/**
 * [tJDBCOutput_5 begin ] stop
 */



	
	/**
	 * [tRowGenerator_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_7", false);
		start_Hash.put("tRowGenerator_7", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_7";

	
		int tos_count_tRowGenerator_7 = 0;
		


int nb_line_tRowGenerator_7 = 0;
int nb_max_row_tRowGenerator_7 = 1;


class tRowGenerator_7Randomizer {
	public String getRandomvar_name() {
		 
		return "DwhCurrentlyRunning" ;
		
	}
	public String getRandomvar_value() {
		 
		return "1"  ;
		
	}
}
	tRowGenerator_7Randomizer randtRowGenerator_7 = new tRowGenerator_7Randomizer();
	
	for (int itRowGenerator_7=0; itRowGenerator_7<nb_max_row_tRowGenerator_7 ;itRowGenerator_7++) {
		row4.var_name = randtRowGenerator_7.getRandomvar_name();
		row4.var_value = randtRowGenerator_7.getRandomvar_value();
		nb_line_tRowGenerator_7++;
		

 



/**
 * [tRowGenerator_7 begin ] stop
 */
	
	/**
	 * [tRowGenerator_7 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 


	tos_count_tRowGenerator_7++;

/**
 * [tRowGenerator_7 main ] stop
 */
	
	/**
	 * [tRowGenerator_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 



/**
 * [tRowGenerator_7 process_data_begin ] stop
 */

	
	/**
	 * [tJDBCOutput_5 main ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

        if (incomingEnforcer_tJDBCOutput_5 != null) {
            incomingEnforcer_tJDBCOutput_5.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_5 != null && incomingEnforcer_tJDBCOutput_5.getRuntimeSchema().getField("var_name") != null){
                    incomingEnforcer_tJDBCOutput_5.put("var_name", row4.var_name);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_5 != null && incomingEnforcer_tJDBCOutput_5.getRuntimeSchema().getField("var_value") != null){
                    incomingEnforcer_tJDBCOutput_5.put("var_value", row4.var_value);
                }
        
        org.apache.avro.generic.IndexedRecord data_tJDBCOutput_5 = null;
        if (incomingEnforcer_tJDBCOutput_5 != null) {
            data_tJDBCOutput_5 = incomingEnforcer_tJDBCOutput_5.getCurrentRecord();
        }
        
        if (writer_tJDBCOutput_5 != null && data_tJDBCOutput_5 != null) {
        	writer_tJDBCOutput_5.write(data_tJDBCOutput_5);
        }
        
        nb_line_tJDBCOutput_5++;

 


	tos_count_tJDBCOutput_5++;

/**
 * [tJDBCOutput_5 main ] stop
 */
	
	/**
	 * [tJDBCOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_5";

	


 



/**
 * [tJDBCOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_5";

	


 



/**
 * [tJDBCOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 



/**
 * [tRowGenerator_7 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_7 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

}
globalMap.put("tRowGenerator_7_NB_LINE",nb_line_tRowGenerator_7);

 

ok_Hash.put("tRowGenerator_7", true);
end_Hash.put("tRowGenerator_7", System.currentTimeMillis());




/**
 * [tRowGenerator_7 end ] stop
 */

	
	/**
	 * [tJDBCOutput_5 end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_5";

	
// end of generic


resourceMap.put("finish_tJDBCOutput_5", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tJDBCOutput_5 = null;
    if (writer_tJDBCOutput_5 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tJDBCOutput_5 = (org.talend.components.api.component.runtime.Result)writer_tJDBCOutput_5.close();
        resultMap_tJDBCOutput_5 = writer_tJDBCOutput_5.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tJDBCOutput_5), container_tJDBCOutput_5);
    }
if(resultMap_tJDBCOutput_5!=null) {
	for(java.util.Map.Entry<String,Object> entry_tJDBCOutput_5 : resultMap_tJDBCOutput_5.entrySet()) {
		switch(entry_tJDBCOutput_5.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tJDBCOutput_5.setComponentData("tJDBCOutput_5", "ERROR_MESSAGE", entry_tJDBCOutput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tJDBCOutput_5.setComponentData("tJDBCOutput_5", "NB_LINE", entry_tJDBCOutput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tJDBCOutput_5.setComponentData("tJDBCOutput_5", "NB_SUCCESS", entry_tJDBCOutput_5.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tJDBCOutput_5.setComponentData("tJDBCOutput_5", "NB_REJECT", entry_tJDBCOutput_5.getValue());
			break;
		default :
            StringBuilder studio_key_tJDBCOutput_5 = new StringBuilder();
            for (int i_tJDBCOutput_5 = 0; i_tJDBCOutput_5 < entry_tJDBCOutput_5.getKey().length(); i_tJDBCOutput_5++) {
                char ch_tJDBCOutput_5 = entry_tJDBCOutput_5.getKey().charAt(i_tJDBCOutput_5);
                if(Character.isUpperCase(ch_tJDBCOutput_5) && i_tJDBCOutput_5> 0) {
                	studio_key_tJDBCOutput_5.append('_');
                }
                studio_key_tJDBCOutput_5.append(ch_tJDBCOutput_5);
            }
			container_tJDBCOutput_5.setComponentData("tJDBCOutput_5", studio_key_tJDBCOutput_5.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tJDBCOutput_5.getValue());
			break;
		}
	}
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJDBCOutput_5", true);
end_Hash.put("tJDBCOutput_5", System.currentTimeMillis());




/**
 * [tJDBCOutput_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tJDBCConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_7 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_7";

	

 



/**
 * [tRowGenerator_7 finally ] stop
 */

	
	/**
	 * [tJDBCOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_5";

	
// finally of generic


if(resourceMap.get("finish_tJDBCOutput_5")==null){
    if(resourceMap.get("writer_tJDBCOutput_5")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tJDBCOutput_5")).close();
		} catch (java.io.IOException e_tJDBCOutput_5) {
			String errorMessage_tJDBCOutput_5 = "failed to release the resource in tJDBCOutput_5 :" + e_tJDBCOutput_5.getMessage();
			System.err.println(errorMessage_tJDBCOutput_5);
		}
	}
}
 



/**
 * [tJDBCOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_7_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_1", false);
		start_Hash.put("tJDBCConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_1";

	
		int tos_count_tJDBCConnection_1 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_1 = (String)(restRequest_tJDBCConnection_1 != null ? restRequest_tJDBCConnection_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_1 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_1 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_1 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_1 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_1.createRuntimeProperties();
 		                    props_tJDBCConnection_1.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_1.setValue("sharedConnectionName",
 		                    "sample_ovirt_engine_history");
 		                    
 		                    props_tJDBCConnection_1.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_1.setValue("autocommit",
 		                    false);
 		                    
 		                    props_tJDBCConnection_1.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineHistoryDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_1.connection.setValue("driverClass",
 		                    context.ovirtEngineHistoryDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_1_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_1_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_1.connection.driverTable).setValue("drivers",tJDBCConnection_1_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_1.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineHistoryDbUser);
 		                    
 		                    props_tJDBCConnection_1.connection.userPassword.setValue("password",
 		                    context.ovirtEngineHistoryDbPassword);
 		                    
globalMap.put("tJDBCConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_1_MAPPINGS_URL", mappings_url_tJDBCConnection_1);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_1 = null;
topology_tJDBCConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_1 = def_tJDBCConnection_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_1, topology_tJDBCConnection_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_1 = def_tJDBCConnection_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_1 = componentRuntime_tJDBCConnection_1.initialize(container_tJDBCConnection_1, props_tJDBCConnection_1);

if (initVr_tJDBCConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_1.getMessage());
}

if(componentRuntime_tJDBCConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_1;
	compDriverInitialization_tJDBCConnection_1.runAtDriver(container_tJDBCConnection_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_1 = null;
if(componentRuntime_tJDBCConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_1;
	if (doesNodeBelongToRequest_tJDBCConnection_1) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_1 = sourceOrSink_tJDBCConnection_1.validate(container_tJDBCConnection_1);
        if (vr_tJDBCConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_1.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_1 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	


 


	tos_count_tJDBCConnection_1++;

/**
 * [tJDBCConnection_1 main ] stop
 */
	
	/**
	 * [tJDBCConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	


 



/**
 * [tJDBCConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	


 



/**
 * [tJDBCConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_1", true);
end_Hash.put("tJDBCConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJDBCConnection_3Process(globalMap);



/**
 * [tJDBCConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_1";

	
// finally of generic

 



/**
 * [tJDBCConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_3", false);
		start_Hash.put("tJDBCConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_3";

	
		int tos_count_tJDBCConnection_3 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_3 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_3 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_3 = (String)(restRequest_tJDBCConnection_3 != null ? restRequest_tJDBCConnection_3.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_3 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_3 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_3 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_3 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_3.createRuntimeProperties();
 		                    props_tJDBCConnection_3.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_3.setValue("sharedConnectionName",
 		                    "hourly_ovirt_engine_history");
 		                    
 		                    props_tJDBCConnection_3.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_3.setValue("autocommit",
 		                    false);
 		                    
 		                    props_tJDBCConnection_3.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineHistoryDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_3.connection.setValue("driverClass",
 		                    context.ovirtEngineHistoryDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_3_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_3_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_3.connection.driverTable).setValue("drivers",tJDBCConnection_3_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_3.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineHistoryDbUser);
 		                    
 		                    props_tJDBCConnection_3.connection.userPassword.setValue("password",
 		                    context.ovirtEngineHistoryDbPassword);
 		                    
globalMap.put("tJDBCConnection_3_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_3_MAPPINGS_URL", mappings_url_tJDBCConnection_3);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_3 = null;
topology_tJDBCConnection_3 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_3 = def_tJDBCConnection_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_3, topology_tJDBCConnection_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_3 = def_tJDBCConnection_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_3 = componentRuntime_tJDBCConnection_3.initialize(container_tJDBCConnection_3, props_tJDBCConnection_3);

if (initVr_tJDBCConnection_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_3.getMessage());
}

if(componentRuntime_tJDBCConnection_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_3;
	compDriverInitialization_tJDBCConnection_3.runAtDriver(container_tJDBCConnection_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_3 = null;
if(componentRuntime_tJDBCConnection_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_3;
	if (doesNodeBelongToRequest_tJDBCConnection_3) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_3 = sourceOrSink_tJDBCConnection_3.validate(container_tJDBCConnection_3);
        if (vr_tJDBCConnection_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_3.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_3 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_3 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_3";

	


 


	tos_count_tJDBCConnection_3++;

/**
 * [tJDBCConnection_3 main ] stop
 */
	
	/**
	 * [tJDBCConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_3";

	


 



/**
 * [tJDBCConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_3";

	


 



/**
 * [tJDBCConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_3 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_3";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_3", true);
end_Hash.put("tJDBCConnection_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJDBCConnection_4Process(globalMap);



/**
 * [tJDBCConnection_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_3";

	
// finally of generic

 



/**
 * [tJDBCConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_3_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJDBCConnection_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_4", false);
		start_Hash.put("tJDBCConnection_4", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_4";

	
		int tos_count_tJDBCConnection_4 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_4 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_4 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_4 = (String)(restRequest_tJDBCConnection_4 != null ? restRequest_tJDBCConnection_4.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_4 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_4 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_4 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_4 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_4.createRuntimeProperties();
 		                    props_tJDBCConnection_4.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_4.setValue("sharedConnectionName",
 		                    "daily_ovirt_engine_history");
 		                    
 		                    props_tJDBCConnection_4.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_4.setValue("autocommit",
 		                    false);
 		                    
 		                    props_tJDBCConnection_4.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineHistoryDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_4.connection.setValue("driverClass",
 		                    context.ovirtEngineHistoryDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_4_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_4_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_4.connection.driverTable).setValue("drivers",tJDBCConnection_4_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_4.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_4.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineHistoryDbUser);
 		                    
 		                    props_tJDBCConnection_4.connection.userPassword.setValue("password",
 		                    context.ovirtEngineHistoryDbPassword);
 		                    
globalMap.put("tJDBCConnection_4_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_4);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_4= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_4_MAPPINGS_URL", mappings_url_tJDBCConnection_4);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_4 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_4";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_4 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_4 = null;
topology_tJDBCConnection_4 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_4 = def_tJDBCConnection_4.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_4, topology_tJDBCConnection_4);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_4 = def_tJDBCConnection_4.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_4 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_4.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_4 = componentRuntime_tJDBCConnection_4.initialize(container_tJDBCConnection_4, props_tJDBCConnection_4);

if (initVr_tJDBCConnection_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_4.getMessage());
}

if(componentRuntime_tJDBCConnection_4 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_4 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_4;
	compDriverInitialization_tJDBCConnection_4.runAtDriver(container_tJDBCConnection_4);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_4 = null;
if(componentRuntime_tJDBCConnection_4 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_4 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_4;
	if (doesNodeBelongToRequest_tJDBCConnection_4) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_4 = sourceOrSink_tJDBCConnection_4.validate(container_tJDBCConnection_4);
        if (vr_tJDBCConnection_4.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_4.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_4 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_4 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_4";

	


 


	tos_count_tJDBCConnection_4++;

/**
 * [tJDBCConnection_4 main ] stop
 */
	
	/**
	 * [tJDBCConnection_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_4";

	


 



/**
 * [tJDBCConnection_4 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_4";

	


 



/**
 * [tJDBCConnection_4 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_4 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_4";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_4", true);
end_Hash.put("tJDBCConnection_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJDBCConnection_5Process(globalMap);



/**
 * [tJDBCConnection_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_4 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_4";

	
// finally of generic

 



/**
 * [tJDBCConnection_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_4_SUBPROCESS_STATE", 1);
	}
	

public void tJDBCConnection_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJDBCConnection_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJDBCConnection_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_5", false);
		start_Hash.put("tJDBCConnection_5", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_5";

	
		int tos_count_tJDBCConnection_5 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_5 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_5 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_5 = (String)(restRequest_tJDBCConnection_5 != null ? restRequest_tJDBCConnection_5.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_5 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_5 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_5 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_5 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_5.createRuntimeProperties();
 		                    props_tJDBCConnection_5.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_5.setValue("sharedConnectionName",
 		                    "delete_ovirt_engine_history");
 		                    
 		                    props_tJDBCConnection_5.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_5.setValue("autocommit",
 		                    false);
 		                    
 		                    props_tJDBCConnection_5.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineHistoryDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_5.connection.setValue("driverClass",
 		                    context.ovirtEngineHistoryDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_5_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_5_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_5.connection.driverTable).setValue("drivers",tJDBCConnection_5_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_5.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_5.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineHistoryDbUser);
 		                    
 		                    props_tJDBCConnection_5.connection.userPassword.setValue("password",
 		                    context.ovirtEngineHistoryDbPassword);
 		                    
globalMap.put("tJDBCConnection_5_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_5);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_5= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_5_MAPPINGS_URL", mappings_url_tJDBCConnection_5);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_5 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_5";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_5 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_5 = null;
topology_tJDBCConnection_5 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_5 = def_tJDBCConnection_5.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_5, topology_tJDBCConnection_5);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_5 = def_tJDBCConnection_5.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_5 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_5.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_5 = componentRuntime_tJDBCConnection_5.initialize(container_tJDBCConnection_5, props_tJDBCConnection_5);

if (initVr_tJDBCConnection_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_5.getMessage());
}

if(componentRuntime_tJDBCConnection_5 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_5 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_5;
	compDriverInitialization_tJDBCConnection_5.runAtDriver(container_tJDBCConnection_5);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_5 = null;
if(componentRuntime_tJDBCConnection_5 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_5 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_5;
	if (doesNodeBelongToRequest_tJDBCConnection_5) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_5 = sourceOrSink_tJDBCConnection_5.validate(container_tJDBCConnection_5);
        if (vr_tJDBCConnection_5.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_5.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_5 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_5 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_5";

	


 


	tos_count_tJDBCConnection_5++;

/**
 * [tJDBCConnection_5 main ] stop
 */
	
	/**
	 * [tJDBCConnection_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_5";

	


 



/**
 * [tJDBCConnection_5 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_5";

	


 



/**
 * [tJDBCConnection_5 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_5 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_5";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_5", true);
end_Hash.put("tJDBCConnection_5", System.currentTimeMillis());




/**
 * [tJDBCConnection_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJDBCConnection_5 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_5";

	
// finally of generic

 



/**
 * [tJDBCConnection_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJDBCConnection_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        				paraList_tRunJob_2.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_2 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_2.put("deleteIncrement", context.deleteIncrement);
                    paraList_tRunJob_2.add("--context_type " + "deleteIncrement" + "=" + "id_Integer");
                    parentContextMap_tRunJob_2.put("deleteMultiplier", context.deleteMultiplier);
                    paraList_tRunJob_2.add("--context_type " + "deleteMultiplier" + "=" + "id_Integer");
                    parentContextMap_tRunJob_2.put("dwhAggregationDebug", context.dwhAggregationDebug);
                    paraList_tRunJob_2.add("--context_type " + "dwhAggregationDebug" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("dwhUuid", context.dwhUuid);
                    paraList_tRunJob_2.add("--context_type " + "dwhUuid" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("etlVersion", context.etlVersion);
                    paraList_tRunJob_2.add("--context_type " + "etlVersion" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("hoursToKeepDaily", context.hoursToKeepDaily);
                    paraList_tRunJob_2.add("--context_type " + "hoursToKeepDaily" + "=" + "id_Integer");
                    parentContextMap_tRunJob_2.put("hoursToKeepHourly", context.hoursToKeepHourly);
                    paraList_tRunJob_2.add("--context_type " + "hoursToKeepHourly" + "=" + "id_Integer");
                    parentContextMap_tRunJob_2.put("hoursToKeepSamples", context.hoursToKeepSamples);
                    paraList_tRunJob_2.add("--context_type " + "hoursToKeepSamples" + "=" + "id_Integer");
                    parentContextMap_tRunJob_2.put("lastErrorSent", context.lastErrorSent);
                    paraList_tRunJob_2.add("--context_type " + "lastErrorSent" + "=" + "id_Date");
                    parentContextMap_tRunJob_2.put("ovirtEngineDbDriverClass", context.ovirtEngineDbDriverClass);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineDbDriverClass" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("ovirtEngineDbJdbcConnection", context.ovirtEngineDbJdbcConnection);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineDbJdbcConnection" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("ovirtEngineDbPassword", context.ovirtEngineDbPassword);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineDbPassword" + "=" + "id_Password");
                    parentContextMap_tRunJob_2.put("ovirtEngineDbUser", context.ovirtEngineDbUser);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineDbUser" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("ovirtEngineHistoryDbDriverClass", context.ovirtEngineHistoryDbDriverClass);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineHistoryDbDriverClass" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("ovirtEngineHistoryDbJdbcConnection", context.ovirtEngineHistoryDbJdbcConnection);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineHistoryDbJdbcConnection" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("ovirtEngineHistoryDbPassword", context.ovirtEngineHistoryDbPassword);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineHistoryDbPassword" + "=" + "id_Password");
                    parentContextMap_tRunJob_2.put("ovirtEngineHistoryDbUser", context.ovirtEngineHistoryDbUser);
                    paraList_tRunJob_2.add("--context_type " + "ovirtEngineHistoryDbUser" + "=" + "id_String");
                    parentContextMap_tRunJob_2.put("runDeleteTime", context.runDeleteTime);
                    paraList_tRunJob_2.add("--context_type " + "runDeleteTime" + "=" + "id_Integer");
                    parentContextMap_tRunJob_2.put("runInterleave", context.runInterleave);
                    paraList_tRunJob_2.add("--context_type " + "runInterleave" + "=" + "id_Integer");
                    parentContextMap_tRunJob_2.put("timeBetweenErrorEvents", context.timeBetweenErrorEvents);
                    paraList_tRunJob_2.add("--context_type " + "timeBetweenErrorEvents" + "=" + "id_Long");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_2().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
	
		ovirt_engine_dwh.minimalversioncheck_4_5.MinimalVersionCheck childJob_tRunJob_2 = new ovirt_engine_dwh.minimalversioncheck_4_5.MinimalVersionCheck();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
            if(childJob_tRunJob_2.getErrorCode() == null){
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
            }
            if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_2.getErrorCode());
                if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
                    java.lang.Exception ce_tRunJob_2 = childJob_tRunJob_2.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_2!=null) ? (ce_tRunJob_2.getClass().getName() + ": " + ce_tRunJob_2.getMessage()) : ""));
                }

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	


public static class event_outputStruct implements routines.system.IPersistableRow<event_outputStruct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public java.util.Date log_time;

				public java.util.Date getLog_time () {
					return this.log_time;
				}
				
			    public String log_type_name;

				public String getLog_type_name () {
					return this.log_type_name;
				}
				
			    public int log_type;

				public int getLog_type () {
					return this.log_type;
				}
				
			    public int severity;

				public int getSeverity () {
					return this.severity;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.log_time = readDate(dis);
					
					this.log_type_name = readString(dis);
					
			        this.log_type = dis.readInt();
					
			        this.severity = dis.readInt();
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.log_time = readDate(dis);
					
					this.log_type_name = readString(dis);
					
			        this.log_type = dis.readInt();
					
			        this.severity = dis.readInt();
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.log_time,dos);
					
					// String
				
						writeString(this.log_type_name,dos);
					
					// int
				
		            	dos.writeInt(this.log_type);
					
					// int
				
		            	dos.writeInt(this.severity);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.log_time,dos);
					
					// String
				
						writeString(this.log_type_name,dos);
					
					// int
				
		            	dos.writeInt(this.log_type);
					
					// int
				
		            	dos.writeInt(this.severity);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("log_time="+String.valueOf(log_time));
		sb.append(",log_type_name="+log_type_name);
		sb.append(",log_type="+String.valueOf(log_type));
		sb.append(",severity="+String.valueOf(severity));
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(event_outputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
event_outputStruct event_output = new event_outputStruct();





	
	/**
	 * [tJDBCOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCOutput_1", false);
		start_Hash.put("tJDBCOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"event_output");
					}
				
		int tos_count_tJDBCOutput_1 = 0;
		

boolean doesNodeBelongToRequest_tJDBCOutput_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCOutput_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCOutput_1 = (String)(restRequest_tJDBCOutput_1 != null ? restRequest_tJDBCOutput_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCOutput_1 =
        new org.talend.components.jdbc.tjdbcoutput.TJDBCOutputDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCOutput_1 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCOutput_1 = null;


org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties props_tJDBCOutput_1 =
        (org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties) def_tJDBCOutput_1.createRuntimeProperties();
 		                    props_tJDBCOutput_1.setValue("dataAction",
 		                        org.talend.components.jdbc.tjdbcoutput.TJDBCOutputProperties.DataAction.INSERT);
 		                    
 		                    props_tJDBCOutput_1.setValue("clearDataInTable",
 		                    false);
 		                    
 		                    props_tJDBCOutput_1.setValue("dieOnError",
 		                    true);
 		                    
 		                    props_tJDBCOutput_1.setValue("enableFieldOptions",
 		                    false);
 		                    
 		                    props_tJDBCOutput_1.setValue("debug",
 		                    false);
 		                    
 		                    props_tJDBCOutput_1.setValue("useBatch",
 		                    true);
 		                    
 		                    props_tJDBCOutput_1.setValue("batchSize",
 		                    10000);
 		                    
 		                    props_tJDBCOutput_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCOutput_1.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_7");
 		                    
 		                    props_tJDBCOutput_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tJDBCOutput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCOutput_1.tableSelection.setValue("tablename",
 		                    "audit_log");
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"audit_log\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSSSSS\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_1\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_1_1_fisrt sst_tJDBCOutput_1_1_fisrt = new SchemaSettingTool_tJDBCOutput_1_1_fisrt();
 		                    
 		                    props_tJDBCOutput_1.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_1_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_1_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"audit_log\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSSSSS\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCOutput_1\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_1_2_fisrt sst_tJDBCOutput_1_2_fisrt = new SchemaSettingTool_tJDBCOutput_1_2_fisrt();
 		                    
 		                    props_tJDBCOutput_1.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_1_2_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tJDBCOutput_1_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"log_time\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"di.table.comment\":\"\",\"talend.field.dbType\":\"TIMESTAMP\",\"talend.field.dbColumnName\":\"log_time\",\"di.column.talendType\":\"id_Date\",\"talend.field.pattern\":\"yyyy-MM-dd HH:mm:ss.SSSSSS\",\"talend.field.length\":\"35\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_time\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type_name\",\"type\":[\"string\",\"null\"],\"default\":\"::character varying\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.default\":\"::character varying\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"di.table.label\":\"log_type_name\",\"talend.field.precision\":\"0\",\"di.table.comment\":\"\",\"talend.field.dbColumnName\":\"log_type_name\",\"di.column.isNullable\":\"true\",\"talend.field.length\":\"100\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"log_type\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"log_type\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"log_type\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"severity\",\"type\":\"int\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"INT4\",\"talend.field.dbColumnName\":\"severity\",\"di.column.talendType\":\"id_Integer\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"severity\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"message\",\"type\":\"string\",\"di.table.comment\":\"\",\"talend.field.dbType\":\"VARCHAR\",\"talend.field.dbColumnName\":\"message\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"2147483647\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"message\",\"talend.field.precision\":\"0\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"di.table.name\":\"tJDBCOutput_1\",\"di.table.label\":\"audit_log\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCOutput_1_3_fisrt sst_tJDBCOutput_1_3_fisrt = new SchemaSettingTool_tJDBCOutput_1_3_fisrt();
 		                    
 		                    props_tJDBCOutput_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCOutput_1_3_fisrt.getSchemaValue()));
 		                    
 		                    props_tJDBCOutput_1.additionalColumns.setValue("positions",
 		                    "BEFORE");
 		                    
 		                    props_tJDBCOutput_1.additionalColumns.setValue("referenceColumns",
 		                    "log_time");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCOutput_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCOutput_1 = props_tJDBCOutput_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCOutput_1.referencedComponent.setReference(referencedComponentProperties_tJDBCOutput_1);
        }
    }
globalMap.put("tJDBCOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCOutput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCOutput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCOutput_1_MAPPINGS_URL", mappings_url_tJDBCOutput_1);

org.talend.components.api.container.RuntimeContainer container_tJDBCOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCOutput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCOutput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCOutput_1 = null;
topology_tJDBCOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCOutput_1 = def_tJDBCOutput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCOutput_1, topology_tJDBCOutput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCOutput_1 = def_tJDBCOutput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCOutput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCOutput_1 = componentRuntime_tJDBCOutput_1.initialize(container_tJDBCOutput_1, props_tJDBCOutput_1);

if (initVr_tJDBCOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCOutput_1.getMessage());
}

if(componentRuntime_tJDBCOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCOutput_1;
	compDriverInitialization_tJDBCOutput_1.runAtDriver(container_tJDBCOutput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCOutput_1 = null;
if(componentRuntime_tJDBCOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCOutput_1;
	if (doesNodeBelongToRequest_tJDBCOutput_1) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCOutput_1 = sourceOrSink_tJDBCOutput_1.validate(container_tJDBCOutput_1);
        if (vr_tJDBCOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCOutput_1.getMessage());
        }
	}
}

    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tJDBCOutput_1 = null;
    if (sourceOrSink_tJDBCOutput_1 instanceof org.talend.components.api.component.runtime.Sink) {
    	org.talend.components.api.component.runtime.Sink sink_tJDBCOutput_1 =
            	(org.talend.components.api.component.runtime.Sink)sourceOrSink_tJDBCOutput_1;
        org.talend.components.api.component.runtime.WriteOperation writeOperation_tJDBCOutput_1 = sink_tJDBCOutput_1.createWriteOperation();
        if (doesNodeBelongToRequest_tJDBCOutput_1) {
            writeOperation_tJDBCOutput_1.initialize(container_tJDBCOutput_1);
        }
        writer_tJDBCOutput_1 = writeOperation_tJDBCOutput_1.createWriter(container_tJDBCOutput_1);
        if (doesNodeBelongToRequest_tJDBCOutput_1) {
            writer_tJDBCOutput_1.open("tJDBCOutput_1");
        }

        resourceMap.put("writer_tJDBCOutput_1", writer_tJDBCOutput_1);
    } // end of "sourceOrSink_tJDBCOutput_1 instanceof ...Sink"
    org.talend.components.api.component.Connector c_tJDBCOutput_1 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tJDBCOutput_1.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tJDBCOutput_1 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tJDBCOutput_1 = props_tJDBCOutput_1.getSchema(c_tJDBCOutput_1, false);
    incomingEnforcer_tJDBCOutput_1 = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tJDBCOutput_1);

                java.lang.Iterable<?> outgoingMainRecordsList_tJDBCOutput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tJDBCOutput_1 = null;


 



/**
 * [tJDBCOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
event_outputStruct event_output_tmp = new event_outputStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row5.type = lcm.getType();
		row5.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row5.priority = lcm.getPriority();
		row5.message = lcm.getMessage();
		row5.code = lcm.getCode();
		
		row5.moment = java.util.Calendar.getInstance().getTime();
	
    	row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;
	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

event_output = null;


// # Output table : 'event_output'
event_output_tmp.log_time = row5.moment ;
event_output_tmp.log_type_name = "DWH_ERROR";
event_output_tmp.log_type = 9704;
event_output_tmp.severity = 2;
event_output_tmp.message = "ETL service start has encountered an error. Please consult the service log for more details." ;
event_output = event_output_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "event_output"
if(event_output != null) { 



	
	/**
	 * [tJDBCOutput_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"event_output"
						
						);
					}
					

        if (incomingEnforcer_tJDBCOutput_1 != null) {
            incomingEnforcer_tJDBCOutput_1.createNewRecord();
        }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_1 != null && incomingEnforcer_tJDBCOutput_1.getRuntimeSchema().getField("log_time") != null){
                    incomingEnforcer_tJDBCOutput_1.put("log_time", event_output.log_time);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_1 != null && incomingEnforcer_tJDBCOutput_1.getRuntimeSchema().getField("log_type_name") != null){
                    incomingEnforcer_tJDBCOutput_1.put("log_type_name", event_output.log_type_name);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_1 != null && incomingEnforcer_tJDBCOutput_1.getRuntimeSchema().getField("log_type") != null){
                    incomingEnforcer_tJDBCOutput_1.put("log_type", event_output.log_type);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_1 != null && incomingEnforcer_tJDBCOutput_1.getRuntimeSchema().getField("severity") != null){
                    incomingEnforcer_tJDBCOutput_1.put("severity", event_output.severity);
                }
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tJDBCOutput_1 != null && incomingEnforcer_tJDBCOutput_1.getRuntimeSchema().getField("message") != null){
                    incomingEnforcer_tJDBCOutput_1.put("message", event_output.message);
                }
        
        org.apache.avro.generic.IndexedRecord data_tJDBCOutput_1 = null;
        if (incomingEnforcer_tJDBCOutput_1 != null) {
            data_tJDBCOutput_1 = incomingEnforcer_tJDBCOutput_1.getCurrentRecord();
        }
        
        if (writer_tJDBCOutput_1 != null && data_tJDBCOutput_1 != null) {
        	writer_tJDBCOutput_1.write(data_tJDBCOutput_1);
        }
        
        nb_line_tJDBCOutput_1++;

 


	tos_count_tJDBCOutput_1++;

/**
 * [tJDBCOutput_1 main ] stop
 */
	
	/**
	 * [tJDBCOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_1";

	


 



/**
 * [tJDBCOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_1";

	


 



/**
 * [tJDBCOutput_1 process_data_end ] stop
 */

} // End of branch "event_output"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJDBCOutput_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_1";

	
// end of generic


resourceMap.put("finish_tJDBCOutput_1", Boolean.TRUE);

    java.util.Map<String, Object> resultMap_tJDBCOutput_1 = null;
    if (writer_tJDBCOutput_1 != null) {
        org.talend.components.api.component.runtime.Result resultObject_tJDBCOutput_1 = (org.talend.components.api.component.runtime.Result)writer_tJDBCOutput_1.close();
        resultMap_tJDBCOutput_1 = writer_tJDBCOutput_1.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tJDBCOutput_1), container_tJDBCOutput_1);
    }
if(resultMap_tJDBCOutput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tJDBCOutput_1 : resultMap_tJDBCOutput_1.entrySet()) {
		switch(entry_tJDBCOutput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tJDBCOutput_1.setComponentData("tJDBCOutput_1", "ERROR_MESSAGE", entry_tJDBCOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tJDBCOutput_1.setComponentData("tJDBCOutput_1", "NB_LINE", entry_tJDBCOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tJDBCOutput_1.setComponentData("tJDBCOutput_1", "NB_SUCCESS", entry_tJDBCOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tJDBCOutput_1.setComponentData("tJDBCOutput_1", "NB_REJECT", entry_tJDBCOutput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tJDBCOutput_1 = new StringBuilder();
            for (int i_tJDBCOutput_1 = 0; i_tJDBCOutput_1 < entry_tJDBCOutput_1.getKey().length(); i_tJDBCOutput_1++) {
                char ch_tJDBCOutput_1 = entry_tJDBCOutput_1.getKey().charAt(i_tJDBCOutput_1);
                if(Character.isUpperCase(ch_tJDBCOutput_1) && i_tJDBCOutput_1> 0) {
                	studio_key_tJDBCOutput_1.append('_');
                }
                studio_key_tJDBCOutput_1.append(ch_tJDBCOutput_1);
            }
			container_tJDBCOutput_1.setComponentData("tJDBCOutput_1", studio_key_tJDBCOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tJDBCOutput_1.getValue());
			break;
		}
	}
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"event_output");
			  	}
			  	
 

ok_Hash.put("tJDBCOutput_1", true);
end_Hash.put("tJDBCOutput_1", System.currentTimeMillis());




/**
 * [tJDBCOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLogCatcher_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk121", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJDBCOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCOutput_1";

	
// finally of generic


if(resourceMap.get("finish_tJDBCOutput_1")==null){
    if(resourceMap.get("writer_tJDBCOutput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tJDBCOutput_1")).close();
		} catch (java.io.IOException e_tJDBCOutput_1) {
			String errorMessage_tJDBCOutput_1 = "failed to release the resource in tJDBCOutput_1 :" + e_tJDBCOutput_1.getMessage();
			System.err.println(errorMessage_tJDBCOutput_1);
		}
	}
}
 



/**
 * [tJDBCOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


while(runningThreadCount.getCount() > 0)
{
     runningThreadCount.add(-1);
}
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	

public void tLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLoop_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLoop_1", false);
		start_Hash.put("tLoop_1", System.currentTimeMillis());
		
	
	currentComponent="tLoop_1";

	
		int tos_count_tLoop_1 = 0;
		

int current_iteration_tLoop_1 = 0;

;
	
while(!org.ovirt.engine.dwh.etltermination.Termination.getInstance().shouldTerminate()){
	
current_iteration_tLoop_1++;
globalMap.put("tLoop_1_CURRENT_ITERATION",current_iteration_tLoop_1);


 



/**
 * [tLoop_1 begin ] stop
 */
	
	/**
	 * [tLoop_1 main ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 


	tos_count_tLoop_1++;

/**
 * [tLoop_1 main ] stop
 */
	
	/**
	 * [tLoop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 process_data_begin ] stop
 */
	
	/**
	 * [tLoop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 process_data_end ] stop
 */
	
	/**
	 * [tLoop_1 end ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	




Thread.sleep(4000);;


}


 

ok_Hash.put("tLoop_1", true);
end_Hash.put("tLoop_1", System.currentTimeMillis());




/**
 * [tLoop_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLoop_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLoop_1 finally ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


while(runningThreadCount.getCount() > 0)
{
     runningThreadCount.add(-1);
}
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("deleteIncrement", context.deleteIncrement);
                    paraList_tRunJob_1.add("--context_type " + "deleteIncrement" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("deleteMultiplier", context.deleteMultiplier);
                    paraList_tRunJob_1.add("--context_type " + "deleteMultiplier" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("dwhAggregationDebug", context.dwhAggregationDebug);
                    paraList_tRunJob_1.add("--context_type " + "dwhAggregationDebug" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("dwhUuid", context.dwhUuid);
                    paraList_tRunJob_1.add("--context_type " + "dwhUuid" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("etlVersion", context.etlVersion);
                    paraList_tRunJob_1.add("--context_type " + "etlVersion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("hoursToKeepDaily", context.hoursToKeepDaily);
                    paraList_tRunJob_1.add("--context_type " + "hoursToKeepDaily" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("hoursToKeepHourly", context.hoursToKeepHourly);
                    paraList_tRunJob_1.add("--context_type " + "hoursToKeepHourly" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("hoursToKeepSamples", context.hoursToKeepSamples);
                    paraList_tRunJob_1.add("--context_type " + "hoursToKeepSamples" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("lastErrorSent", context.lastErrorSent);
                    paraList_tRunJob_1.add("--context_type " + "lastErrorSent" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("ovirtEngineDbDriverClass", context.ovirtEngineDbDriverClass);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineDbDriverClass" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ovirtEngineDbJdbcConnection", context.ovirtEngineDbJdbcConnection);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineDbJdbcConnection" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ovirtEngineDbPassword", context.ovirtEngineDbPassword);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineDbPassword" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("ovirtEngineDbUser", context.ovirtEngineDbUser);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineDbUser" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ovirtEngineHistoryDbDriverClass", context.ovirtEngineHistoryDbDriverClass);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineHistoryDbDriverClass" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ovirtEngineHistoryDbJdbcConnection", context.ovirtEngineHistoryDbJdbcConnection);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineHistoryDbJdbcConnection" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ovirtEngineHistoryDbPassword", context.ovirtEngineHistoryDbPassword);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineHistoryDbPassword" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("ovirtEngineHistoryDbUser", context.ovirtEngineHistoryDbUser);
                    paraList_tRunJob_1.add("--context_type " + "ovirtEngineHistoryDbUser" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("runDeleteTime", context.runDeleteTime);
                    paraList_tRunJob_1.add("--context_type " + "runDeleteTime" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("runInterleave", context.runInterleave);
                    paraList_tRunJob_1.add("--context_type " + "runInterleave" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("timeBetweenErrorEvents", context.timeBetweenErrorEvents);
                    paraList_tRunJob_1.add("--context_type " + "timeBetweenErrorEvents" + "=" + "id_Long");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		ovirt_engine_dwh.validateinstallation_4_5.ValidateInstallation childJob_tRunJob_1 = new ovirt_engine_dwh.validateinstallation_4_5.ValidateInstallation();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_1.getErrorCode());
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("timesDisconnectDwhFailed", "0");

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tLoop_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public String option_value;

				public String getOption_value () {
					return this.option_value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.option_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.option_value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.option_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.option_value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("option_value="+option_value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLoop_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();



	
	/**
	 * [tLoop_2 begin ] start
	 */

				
			int NB_ITERATE_tJavaFlex_2 = 0; //for statistics
						
			int NB_ITERATE_tJavaFlex_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_2", false);
		start_Hash.put("tLoop_2", System.currentTimeMillis());
		
	
	currentComponent="tLoop_2";

	
		int tos_count_tLoop_2 = 0;
		

int current_iteration_tLoop_2 = 0;

boolean i = false;
	
while(!i){
	
current_iteration_tLoop_2++;
globalMap.put("tLoop_2_CURRENT_ITERATION",current_iteration_tLoop_2);


 



/**
 * [tLoop_2 begin ] stop
 */
	
	/**
	 * [tLoop_2 main ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 


	tos_count_tLoop_2++;

/**
 * [tLoop_2 main ] stop
 */
	
	/**
	 * [tLoop_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 



/**
 * [tLoop_2 process_data_begin ] stop
 */
	NB_ITERATE_tJavaFlex_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate4", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tJavaFlex_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJavaFlex_2 begin ] start
	 */

				
			int NB_ITERATE_tJDBCConnection_7 = 0; //for statistics
			

	
		
		ok_Hash.put("tJavaFlex_2", false);
		start_Hash.put("tJavaFlex_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_2";

	
		int tos_count_tJavaFlex_2 = 0;
		


// start part of your Java code
try {


 



/**
 * [tJavaFlex_2 begin ] stop
 */
	
	/**
	 * [tJavaFlex_2 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	



// here is the main part of the component,
// a piece of code executed in the row
// loop


 


	tos_count_tJavaFlex_2++;

/**
 * [tJavaFlex_2 main ] stop
 */
	
	/**
	 * [tJavaFlex_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 process_data_begin ] stop
 */
	NB_ITERATE_tJDBCConnection_7++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tJDBCConnection_7);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJDBCConnection_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCConnection_7", false);
		start_Hash.put("tJDBCConnection_7", System.currentTimeMillis());
		
	
	currentComponent="tJDBCConnection_7";

	
		int tos_count_tJDBCConnection_7 = 0;
		

boolean doesNodeBelongToRequest_tJDBCConnection_7 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCConnection_7 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCConnection_7 = (String)(restRequest_tJDBCConnection_7 != null ? restRequest_tJDBCConnection_7.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCConnection_7 =
        new org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCConnection_7 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCConnection_7 = null;


org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties props_tJDBCConnection_7 =
        (org.talend.components.jdbc.tjdbcconnection.TJDBCConnectionProperties) def_tJDBCConnection_7.createRuntimeProperties();
 		                    props_tJDBCConnection_7.setValue("shareConnection",
 		                    true);
 		                    
 		                    props_tJDBCConnection_7.setValue("sharedConnectionName",
 		                    "engine-events");
 		                    
 		                    props_tJDBCConnection_7.setValue("useAutoCommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_7.setValue("autocommit",
 		                    true);
 		                    
 		                    props_tJDBCConnection_7.connection.setValue("jdbcUrl",
 		                    context.ovirtEngineDbJdbcConnection);
 		                    
 		                    props_tJDBCConnection_7.connection.setValue("driverClass",
 		                    context.ovirtEngineDbDriverClass);
 		                    
 		                    java.util.List<Object> tJDBCConnection_7_connection_driverTable_drivers = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCConnection_7_connection_driverTable_drivers.add("mvn:postgresql/postgresql/8.4-703.jdbc4/jar");
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCConnection_7.connection.driverTable).setValue("drivers",tJDBCConnection_7_connection_driverTable_drivers);
 		                    
 		                    props_tJDBCConnection_7.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tJDBCConnection_7.connection.userPassword.setValue("userId",
 		                    context.ovirtEngineDbUser);
 		                    
 		                    props_tJDBCConnection_7.connection.userPassword.setValue("password",
 		                    context.ovirtEngineDbPassword);
 		                    
globalMap.put("tJDBCConnection_7_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCConnection_7);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCConnection_7= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCConnection_7_MAPPINGS_URL", mappings_url_tJDBCConnection_7);

org.talend.components.api.container.RuntimeContainer container_tJDBCConnection_7 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCConnection_7";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCConnection_7 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCConnection_7 = null;
topology_tJDBCConnection_7 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCConnection_7 = def_tJDBCConnection_7.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCConnection_7, topology_tJDBCConnection_7);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCConnection_7 = def_tJDBCConnection_7.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCConnection_7 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCConnection_7.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCConnection_7 = componentRuntime_tJDBCConnection_7.initialize(container_tJDBCConnection_7, props_tJDBCConnection_7);

if (initVr_tJDBCConnection_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCConnection_7.getMessage());
}

if(componentRuntime_tJDBCConnection_7 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCConnection_7 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCConnection_7;
	compDriverInitialization_tJDBCConnection_7.runAtDriver(container_tJDBCConnection_7);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCConnection_7 = null;
if(componentRuntime_tJDBCConnection_7 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCConnection_7 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCConnection_7;
	if (doesNodeBelongToRequest_tJDBCConnection_7) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCConnection_7 = sourceOrSink_tJDBCConnection_7.validate(container_tJDBCConnection_7);
        if (vr_tJDBCConnection_7.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCConnection_7.getMessage());
        }
	}
}

 



/**
 * [tJDBCConnection_7 begin ] stop
 */
	
	/**
	 * [tJDBCConnection_7 main ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_7";

	


 


	tos_count_tJDBCConnection_7++;

/**
 * [tJDBCConnection_7 main ] stop
 */
	
	/**
	 * [tJDBCConnection_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_7";

	


 



/**
 * [tJDBCConnection_7 process_data_begin ] stop
 */
	
	/**
	 * [tJDBCConnection_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_7";

	


 



/**
 * [tJDBCConnection_7 process_data_end ] stop
 */
	
	/**
	 * [tJDBCConnection_7 end ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_7";

	
// end of generic

 

ok_Hash.put("tJDBCConnection_7", true);
end_Hash.put("tJDBCConnection_7", System.currentTimeMillis());




/**
 * [tJDBCConnection_7 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tJDBCConnection_7);
						}				
					




	
	/**
	 * [tJavaFlex_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 process_data_end ] stop
 */
	
	/**
	 * [tJavaFlex_2 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	


// end of the component, outside/closing the loop
} catch(Exception e) {
    //this will only happen in db
    //connection error and loop should recover
    int TimesDisconnectDwhFailed = Integer.parseInt(((String)globalMap.get("timesDisconnectDwhFailed")));
    if  ((TimesDisconnectDwhFailed % 10) == 0) {
        globalMap.put("timesDisconnectDwhFailed",Integer.valueOf(TimesDisconnectDwhFailed + 1).toString());
        System.out.println(TalendDate.getDate("CCYY-MM-DD hh:mm:ss") + " |Exception in component tJavaFlex_6: " + e.toString() + " has been caught");
    } else {
        globalMap.put("timesDisconnectDwhFailed",Integer.valueOf(TimesDisconnectDwhFailed + 1).toString());
    }
}

 

ok_Hash.put("tJavaFlex_2", true);
end_Hash.put("tJavaFlex_2", System.currentTimeMillis());




/**
 * [tJavaFlex_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tJavaFlex_2);
						}				
					




	NB_ITERATE_tJavaFlex_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate2", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJavaFlex_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

				
			int NB_ITERATE_tJDBCInput_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		


// start part of your Java code
try {  


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



// here is the main part of the component,
// a piece of code executed in the row
// loop


 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */
	NB_ITERATE_tJDBCInput_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tJDBCInput_1);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tJDBCInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJDBCInput_1", false);
		start_Hash.put("tJDBCInput_1", System.currentTimeMillis());
		
	
	currentComponent="tJDBCInput_1";

	
		int tos_count_tJDBCInput_1 = 0;
		

boolean doesNodeBelongToRequest_tJDBCInput_1 = 0 == 0;
@SuppressWarnings("unchecked")
java.util.Map<String, Object> restRequest_tJDBCInput_1 = (java.util.Map<String, Object>)globalMap.get("restRequest");
String currentTRestRequestOperation_tJDBCInput_1 = (String)(restRequest_tJDBCInput_1 != null ? restRequest_tJDBCInput_1.get("OPERATION") : null);

org.talend.components.api.component.ComponentDefinition def_tJDBCInput_1 =
        new org.talend.components.jdbc.tjdbcinput.TJDBCInputDefinition();

org.talend.components.api.component.runtime.Writer writer_tJDBCInput_1 = null;
org.talend.components.api.component.runtime.Reader reader_tJDBCInput_1 = null;


org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties props_tJDBCInput_1 =
        (org.talend.components.jdbc.tjdbcinput.TJDBCInputProperties) def_tJDBCInput_1.createRuntimeProperties();
 		                    props_tJDBCInput_1.setValue("sql",
 		                    "SELECT option_value FROM vdc_options WHERE option_name = 'DisconnectDwh'");
 		                    
 		                    props_tJDBCInput_1.setValue("useCursor",
 		                    false);
 		                    
 		                    props_tJDBCInput_1.setValue("trimStringOrCharColumns",
 		                    false);
 		                    
 		                    props_tJDBCInput_1.setValue("enableDBMapping",
 		                    false);
 		                    
 		                    props_tJDBCInput_1.setValue("enableSpecialTableName",
 		                    true);
 		                    
 		                    props_tJDBCInput_1.setValue("usePreparedStatement",
 		                    false);
 		                    
 		                    props_tJDBCInput_1.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tJDBCInput_1.referencedComponent.setValue("componentInstanceId",
 		                    "tJDBCConnection_7");
 		                    
 		                    props_tJDBCInput_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tJDBCConnection");
 		                    
 		                    props_tJDBCInput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    class SchemaSettingTool_tJDBCInput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"tJDBCInput_1\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"option_value\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"option_value\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.column.originalLength\":\"0\",\"di.table.label\":\"option_value\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"tJDBCInput_1\",\"di.table.label\":\"tJDBCInput_1\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tJDBCInput_1_1_fisrt sst_tJDBCInput_1_1_fisrt = new SchemaSettingTool_tJDBCInput_1_1_fisrt();
 		                    
 		                    props_tJDBCInput_1.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tJDBCInput_1_1_fisrt.getSchemaValue()));
 		                    
 		                    props_tJDBCInput_1.tableSelection.setValue("tablename",
 		                    "vdc_options");
 		                    
 		                    java.util.List<Object> tJDBCInput_1_trimTable_trim = new java.util.ArrayList<Object>();
 		                    
 		                                tJDBCInput_1_trimTable_trim.add(false);
 		                                
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCInput_1.trimTable).setValue("trim",tJDBCInput_1_trimTable_trim);
 		                    
 		                    java.util.List<Object> tJDBCInput_1_trimTable_columnName = new java.util.ArrayList<Object>();
 		                    
 		                            tJDBCInput_1_trimTable_columnName.add("option_value");
 		                            
 		                    ((org.talend.daikon.properties.Properties)props_tJDBCInput_1.trimTable).setValue("columnName",tJDBCInput_1_trimTable_columnName);
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tJDBCInput_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tJDBCInput_1 = props_tJDBCInput_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tJDBCInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tJDBCInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tJDBCInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tJDBCInput_1.referencedComponent.setReference(referencedComponentProperties_tJDBCInput_1);
        }
    }
globalMap.put("tJDBCInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tJDBCInput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
java.net.URL mappings_url_tJDBCInput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tJDBCInput_1_MAPPINGS_URL", mappings_url_tJDBCInput_1);

org.talend.components.api.container.RuntimeContainer container_tJDBCInput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tJDBCInput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tJDBCInput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tJDBCInput_1 = null;
topology_tJDBCInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tJDBCInput_1 = def_tJDBCInput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tJDBCInput_1, topology_tJDBCInput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tJDBCInput_1 = def_tJDBCInput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tJDBCInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tJDBCInput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tJDBCInput_1 = componentRuntime_tJDBCInput_1.initialize(container_tJDBCInput_1, props_tJDBCInput_1);

if (initVr_tJDBCInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tJDBCInput_1.getMessage());
}

if(componentRuntime_tJDBCInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tJDBCInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tJDBCInput_1;
	compDriverInitialization_tJDBCInput_1.runAtDriver(container_tJDBCInput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tJDBCInput_1 = null;
if(componentRuntime_tJDBCInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tJDBCInput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tJDBCInput_1;
	if (doesNodeBelongToRequest_tJDBCInput_1) {
        org.talend.daikon.properties.ValidationResult vr_tJDBCInput_1 = sourceOrSink_tJDBCInput_1.validate(container_tJDBCInput_1);
        if (vr_tJDBCInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
            throw new RuntimeException(vr_tJDBCInput_1.getMessage());
        }
	}
}

    if (sourceOrSink_tJDBCInput_1 instanceof org.talend.components.api.component.runtime.Source) {
        org.talend.components.api.component.runtime.Source source_tJDBCInput_1 =
                (org.talend.components.api.component.runtime.Source)sourceOrSink_tJDBCInput_1;
        reader_tJDBCInput_1 = source_tJDBCInput_1.createReader(container_tJDBCInput_1);
	    reader_tJDBCInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tJDBCInput_1, container_tJDBCInput_1);

            boolean multi_output_is_allowed_tJDBCInput_1 = false;
            org.talend.components.api.component.Connector c_tJDBCInput_1 = null;
            for (org.talend.components.api.component.Connector currentConnector : props_tJDBCInput_1.getAvailableConnectors(null, true)) {
                if (currentConnector.getName().equals("MAIN")) {
                    c_tJDBCInput_1 = currentConnector;
                }

                if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                    multi_output_is_allowed_tJDBCInput_1 = true;
                }
            }
            org.apache.avro.Schema schema_tJDBCInput_1 = props_tJDBCInput_1.getSchema(c_tJDBCInput_1, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tJDBCInput_1 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tJDBCInput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tJDBCInput_1 = null;

        // Iterate through the incoming data.
        boolean available_tJDBCInput_1 = reader_tJDBCInput_1.start();

        resourceMap.put("reader_tJDBCInput_1", reader_tJDBCInput_1);

        for (; available_tJDBCInput_1; available_tJDBCInput_1 = reader_tJDBCInput_1.advance()) {
			nb_line_tJDBCInput_1++;

			
			if (multi_output_is_allowed_tJDBCInput_1) {
				
					row9 = null;
				

				
			}
			

			try {
				Object data_tJDBCInput_1 = reader_tJDBCInput_1.getCurrent();
				

					if(multi_output_is_allowed_tJDBCInput_1) {
						row9 = new row9Struct();
					}

					
        // Construct the factory once when the first data arrives.
        if (factory_tJDBCInput_1 == null) {
            factory_tJDBCInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tJDBCInput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tJDBCInput_1.setWrapped(factory_tJDBCInput_1.convertToAvro(data_tJDBCInput_1));
                Object columnValue_0_tJDBCInput_1 = outgoingEnforcer_tJDBCInput_1.get(0);
                        row9.option_value = (String) (columnValue_0_tJDBCInput_1);
			} catch (org.talend.components.api.exception.DataRejectException e_tJDBCInput_1) {
				java.util.Map<String,Object> info_tJDBCInput_1 = e_tJDBCInput_1.getRejectInfo();
				
					//TODO use a method instead of getting method by the special key "error/errorMessage"
					Object errorMessage_tJDBCInput_1 = null;
					if(info_tJDBCInput_1.containsKey("error")){
						errorMessage_tJDBCInput_1 = info_tJDBCInput_1.get("error");
					}else if(info_tJDBCInput_1.containsKey("errorMessage")){
						errorMessage_tJDBCInput_1 = info_tJDBCInput_1.get("errorMessage");
					}else{
						errorMessage_tJDBCInput_1 = "Rejected but error message missing";
					}
					errorMessage_tJDBCInput_1 = "Row "+ nb_line_tJDBCInput_1 + ": "+errorMessage_tJDBCInput_1;
					System.err.println(errorMessage_tJDBCInput_1);
				
					// If the record is reject, the main line record should put NULL
					row9 = null;
				
			} // end of catch

                java.lang.Iterable<?> outgoingMainRecordsList_tJDBCInput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tJDBCInput_1 = null;


 



/**
 * [tJDBCInput_1 begin ] stop
 */
	
	/**
	 * [tJDBCInput_1 main ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	


 


	tos_count_tJDBCInput_1++;

/**
 * [tJDBCInput_1 main ] stop
 */
	
	/**
	 * [tJDBCInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	


 



/**
 * [tJDBCInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    i = "1".equals(row9.option_value);
if (i) {
System.out.println("ETL Service will now stop because a flag was raised to disconnect DWH on Engine DB");
}
if ( ((String)globalMap.get("timesDisconnectDwhFailed")) != "0" ) {
    globalMap.put("timesDisconnectDwhFailed","0");
}
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJDBCInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	


 



/**
 * [tJDBCInput_1 process_data_end ] stop
 */
	
	/**
	 * [tJDBCInput_1 end ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	
// end of generic


resourceMap.put("finish_tJDBCInput_1", Boolean.TRUE);

    } // while  
    } // end of "if (sourceOrSink_tJDBCInput_1 instanceof ...Source)"
    java.util.Map<String, Object> resultMap_tJDBCInput_1 = null;
    if (reader_tJDBCInput_1 != null) {
        reader_tJDBCInput_1.close();
        resultMap_tJDBCInput_1 = reader_tJDBCInput_1.getReturnValues();
    }
if(resultMap_tJDBCInput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tJDBCInput_1 : resultMap_tJDBCInput_1.entrySet()) {
		switch(entry_tJDBCInput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tJDBCInput_1.setComponentData("tJDBCInput_1", "ERROR_MESSAGE", entry_tJDBCInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tJDBCInput_1.setComponentData("tJDBCInput_1", "NB_LINE", entry_tJDBCInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tJDBCInput_1.setComponentData("tJDBCInput_1", "NB_SUCCESS", entry_tJDBCInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tJDBCInput_1.setComponentData("tJDBCInput_1", "NB_REJECT", entry_tJDBCInput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tJDBCInput_1 = new StringBuilder();
            for (int i_tJDBCInput_1 = 0; i_tJDBCInput_1 < entry_tJDBCInput_1.getKey().length(); i_tJDBCInput_1++) {
                char ch_tJDBCInput_1 = entry_tJDBCInput_1.getKey().charAt(i_tJDBCInput_1);
                if(Character.isUpperCase(ch_tJDBCInput_1) && i_tJDBCInput_1> 0) {
                	studio_key_tJDBCInput_1.append('_');
                }
                studio_key_tJDBCInput_1.append(ch_tJDBCInput_1);
            }
			container_tJDBCInput_1.setComponentData("tJDBCInput_1", studio_key_tJDBCInput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tJDBCInput_1.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tJDBCInput_1", true);
end_Hash.put("tJDBCInput_1", System.currentTimeMillis());




/**
 * [tJDBCInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tJDBCInput_1);
						}				
					




	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */
	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
} catch(Exception e) {
    //this will only happen in db
    //connection error and loop should recover
}

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJavaFlex_1);
						}				
					




	
	/**
	 * [tLoop_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 



/**
 * [tLoop_2 process_data_end ] stop
 */
	
	/**
	 * [tLoop_2 end ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	




Thread.sleep(4000);;


}


 

ok_Hash.put("tLoop_2", true);
end_Hash.put("tLoop_2", System.currentTimeMillis());




/**
 * [tLoop_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLoop_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLoop_2 finally ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 



/**
 * [tLoop_2 finally ] stop
 */

	
	/**
	 * [tJavaFlex_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 finally ] stop
 */

	
	/**
	 * [tJDBCConnection_7 finally ] start
	 */

	

	
	
	currentComponent="tJDBCConnection_7";

	
// finally of generic

 



/**
 * [tJDBCConnection_7 finally ] stop
 */







	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tJDBCInput_1 finally ] start
	 */

	

	
	
	currentComponent="tJDBCInput_1";

	
// finally of generic


if(resourceMap.get("finish_tJDBCInput_1")==null){
    if(resourceMap.get("reader_tJDBCInput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tJDBCInput_1")).close();
		} catch (java.io.IOException e_tJDBCInput_1) {
			String errorMessage_tJDBCInput_1 = "failed to release the resource in tJDBCInput_1 :" + e_tJDBCInput_1.getMessage();
			System.err.println(errorMessage_tJDBCInput_1);
		}
	}
}
 



/**
 * [tJDBCInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


while(runningThreadCount.getCount() > 0)
{
     runningThreadCount.add(-1);
}
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];
    static byte[] commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length) {
				if(length < 1024 && commonByteArray_OVIRT_ENGINE_DWH_HistoryETL.length == 0) {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[1024];
				} else {
   					commonByteArray_OVIRT_ENGINE_DWH_HistoryETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length);
			strReturn = new String(commonByteArray_OVIRT_ENGINE_DWH_HistoryETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_OVIRT_ENGINE_DWH_HistoryETL) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_CONSOLE begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_CONSOLE", false);
		start_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_CONSOLE = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
		java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;	

 		StringBuilder strBuffer_talendLogs_CONSOLE = null;
		int nb_line_talendLogs_CONSOLE = 0;
///////////////////////    			



 



/**
 * [talendLogs_CONSOLE begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main"
						
						);
					}
					
///////////////////////		
						



				strBuffer_talendLogs_CONSOLE = new StringBuilder();




   				
	    		if(row_talendLogs_LOGS.moment != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
								FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.root_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.root_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.father_pid != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.father_pid)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.project != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.project)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.job != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.job)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.context != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.context)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.priority != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.priority)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.type != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.type)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.origin != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.origin)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.message != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.message)							
				);


							
	    		} //  			

    			strBuffer_talendLogs_CONSOLE.append("|");
    			


   				
	    		if(row_talendLogs_LOGS.code != null) { //              
                    							
       
				strBuffer_talendLogs_CONSOLE.append(
				                String.valueOf(row_talendLogs_LOGS.code)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_talendLogs_CONSOLE);
                    }
                    consoleOut_talendLogs_CONSOLE.println(strBuffer_talendLogs_CONSOLE.toString());
                    consoleOut_talendLogs_CONSOLE.flush();
                    nb_line_talendLogs_CONSOLE++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_talendLogs_CONSOLE++;

/**
 * [talendLogs_CONSOLE main ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_CONSOLE process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
globalMap.put("talendLogs_LOGS_ERROR_MESSAGE",e_talendLogs_LOGS.getMessage());
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	


//////
//////
globalMap.put("talendLogs_CONSOLE_NB_LINE",nb_line_talendLogs_CONSOLE);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_CONSOLE", true);
end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());




/**
 * [talendLogs_CONSOLE end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_CONSOLE finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_CONSOLE";
	
	currentComponent="talendLogs_CONSOLE";

	

 



/**
 * [talendLogs_CONSOLE finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final HistoryETL HistoryETLClass = new HistoryETL();

        int exitCode = HistoryETLClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HistoryETL.class.getClassLoader().getResourceAsStream("ovirt_engine_dwh/historyetl_4_5/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HistoryETL.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("deleteIncrement", "id_Integer");
                        if(context.getStringValue("deleteIncrement") == null) {
                            context.deleteIncrement = null;
                        } else {
                            try{
                                context.deleteIncrement=routines.system.ParserUtils.parseTo_Integer (context.getProperty("deleteIncrement"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "deleteIncrement", e.getMessage()));
                                context.deleteIncrement=null;
                            }
                        }
                        context.setContextType("deleteMultiplier", "id_Integer");
                        if(context.getStringValue("deleteMultiplier") == null) {
                            context.deleteMultiplier = null;
                        } else {
                            try{
                                context.deleteMultiplier=routines.system.ParserUtils.parseTo_Integer (context.getProperty("deleteMultiplier"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "deleteMultiplier", e.getMessage()));
                                context.deleteMultiplier=null;
                            }
                        }
                        context.setContextType("dwhAggregationDebug", "id_String");
                        if(context.getStringValue("dwhAggregationDebug") == null) {
                            context.dwhAggregationDebug = null;
                        } else {
                            context.dwhAggregationDebug=(String) context.getProperty("dwhAggregationDebug");
                        }
                        context.setContextType("dwhUuid", "id_String");
                        if(context.getStringValue("dwhUuid") == null) {
                            context.dwhUuid = null;
                        } else {
                            context.dwhUuid=(String) context.getProperty("dwhUuid");
                        }
                        context.setContextType("etlVersion", "id_String");
                        if(context.getStringValue("etlVersion") == null) {
                            context.etlVersion = null;
                        } else {
                            context.etlVersion=(String) context.getProperty("etlVersion");
                        }
                        context.setContextType("hoursToKeepDaily", "id_Integer");
                        if(context.getStringValue("hoursToKeepDaily") == null) {
                            context.hoursToKeepDaily = null;
                        } else {
                            try{
                                context.hoursToKeepDaily=routines.system.ParserUtils.parseTo_Integer (context.getProperty("hoursToKeepDaily"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hoursToKeepDaily", e.getMessage()));
                                context.hoursToKeepDaily=null;
                            }
                        }
                        context.setContextType("hoursToKeepHourly", "id_Integer");
                        if(context.getStringValue("hoursToKeepHourly") == null) {
                            context.hoursToKeepHourly = null;
                        } else {
                            try{
                                context.hoursToKeepHourly=routines.system.ParserUtils.parseTo_Integer (context.getProperty("hoursToKeepHourly"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hoursToKeepHourly", e.getMessage()));
                                context.hoursToKeepHourly=null;
                            }
                        }
                        context.setContextType("hoursToKeepSamples", "id_Integer");
                        if(context.getStringValue("hoursToKeepSamples") == null) {
                            context.hoursToKeepSamples = null;
                        } else {
                            try{
                                context.hoursToKeepSamples=routines.system.ParserUtils.parseTo_Integer (context.getProperty("hoursToKeepSamples"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hoursToKeepSamples", e.getMessage()));
                                context.hoursToKeepSamples=null;
                            }
                        }
                        context.setContextType("lastErrorSent", "id_Date");
                        if(context.getStringValue("lastErrorSent") == null) {
                            context.lastErrorSent = null;
                        } else {
                            String context_lastErrorSent_value = context.getProperty("lastErrorSent");
                            try{
                                if (context_lastErrorSent_value == null){
                                    context_lastErrorSent_value = "";
                                }
                                int context_lastErrorSent_pos = context_lastErrorSent_value.indexOf(";");
                                String context_lastErrorSent_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_lastErrorSent_pos > -1){
                                    context_lastErrorSent_pattern = context_lastErrorSent_value.substring(0, context_lastErrorSent_pos);
                                    context_lastErrorSent_value = context_lastErrorSent_value.substring(context_lastErrorSent_pos + 1);
                                }

                                context.lastErrorSent=(java.util.Date)(new java.text.SimpleDateFormat(context_lastErrorSent_pattern).parse(context_lastErrorSent_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_lastErrorSent_longValue = Long.valueOf(context_lastErrorSent_value);
                                    context.lastErrorSent = new java.util.Date(context_lastErrorSent_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "lastErrorSent", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.lastErrorSent=null;
                                }
                            }
                        }
                        context.setContextType("ovirtEngineDbDriverClass", "id_String");
                        if(context.getStringValue("ovirtEngineDbDriverClass") == null) {
                            context.ovirtEngineDbDriverClass = null;
                        } else {
                            context.ovirtEngineDbDriverClass=(String) context.getProperty("ovirtEngineDbDriverClass");
                        }
                        context.setContextType("ovirtEngineDbJdbcConnection", "id_String");
                        if(context.getStringValue("ovirtEngineDbJdbcConnection") == null) {
                            context.ovirtEngineDbJdbcConnection = null;
                        } else {
                            context.ovirtEngineDbJdbcConnection=(String) context.getProperty("ovirtEngineDbJdbcConnection");
                        }
                        context.setContextType("ovirtEngineDbPassword", "id_Password");
                        if(context.getStringValue("ovirtEngineDbPassword") == null) {
                            context.ovirtEngineDbPassword = null;
                        } else {
                            String pwd_ovirtEngineDbPassword_value = context.getProperty("ovirtEngineDbPassword");
                            context.ovirtEngineDbPassword = null;
                            if(pwd_ovirtEngineDbPassword_value!=null) {
                                if(context_param.containsKey("ovirtEngineDbPassword")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ovirtEngineDbPassword = pwd_ovirtEngineDbPassword_value;
                                } else if (!pwd_ovirtEngineDbPassword_value.isEmpty()) {
                                    try {
                                        context.ovirtEngineDbPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ovirtEngineDbPassword_value);
                                        context.put("ovirtEngineDbPassword",context.ovirtEngineDbPassword);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("ovirtEngineDbUser", "id_String");
                        if(context.getStringValue("ovirtEngineDbUser") == null) {
                            context.ovirtEngineDbUser = null;
                        } else {
                            context.ovirtEngineDbUser=(String) context.getProperty("ovirtEngineDbUser");
                        }
                        context.setContextType("ovirtEngineHistoryDbDriverClass", "id_String");
                        if(context.getStringValue("ovirtEngineHistoryDbDriverClass") == null) {
                            context.ovirtEngineHistoryDbDriverClass = null;
                        } else {
                            context.ovirtEngineHistoryDbDriverClass=(String) context.getProperty("ovirtEngineHistoryDbDriverClass");
                        }
                        context.setContextType("ovirtEngineHistoryDbJdbcConnection", "id_String");
                        if(context.getStringValue("ovirtEngineHistoryDbJdbcConnection") == null) {
                            context.ovirtEngineHistoryDbJdbcConnection = null;
                        } else {
                            context.ovirtEngineHistoryDbJdbcConnection=(String) context.getProperty("ovirtEngineHistoryDbJdbcConnection");
                        }
                        context.setContextType("ovirtEngineHistoryDbPassword", "id_Password");
                        if(context.getStringValue("ovirtEngineHistoryDbPassword") == null) {
                            context.ovirtEngineHistoryDbPassword = null;
                        } else {
                            String pwd_ovirtEngineHistoryDbPassword_value = context.getProperty("ovirtEngineHistoryDbPassword");
                            context.ovirtEngineHistoryDbPassword = null;
                            if(pwd_ovirtEngineHistoryDbPassword_value!=null) {
                                if(context_param.containsKey("ovirtEngineHistoryDbPassword")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.ovirtEngineHistoryDbPassword = pwd_ovirtEngineHistoryDbPassword_value;
                                } else if (!pwd_ovirtEngineHistoryDbPassword_value.isEmpty()) {
                                    try {
                                        context.ovirtEngineHistoryDbPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ovirtEngineHistoryDbPassword_value);
                                        context.put("ovirtEngineHistoryDbPassword",context.ovirtEngineHistoryDbPassword);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("ovirtEngineHistoryDbUser", "id_String");
                        if(context.getStringValue("ovirtEngineHistoryDbUser") == null) {
                            context.ovirtEngineHistoryDbUser = null;
                        } else {
                            context.ovirtEngineHistoryDbUser=(String) context.getProperty("ovirtEngineHistoryDbUser");
                        }
                        context.setContextType("runDeleteTime", "id_Integer");
                        if(context.getStringValue("runDeleteTime") == null) {
                            context.runDeleteTime = null;
                        } else {
                            try{
                                context.runDeleteTime=routines.system.ParserUtils.parseTo_Integer (context.getProperty("runDeleteTime"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "runDeleteTime", e.getMessage()));
                                context.runDeleteTime=null;
                            }
                        }
                        context.setContextType("runInterleave", "id_Integer");
                        if(context.getStringValue("runInterleave") == null) {
                            context.runInterleave = null;
                        } else {
                            try{
                                context.runInterleave=routines.system.ParserUtils.parseTo_Integer (context.getProperty("runInterleave"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "runInterleave", e.getMessage()));
                                context.runInterleave=null;
                            }
                        }
                        context.setContextType("timeBetweenErrorEvents", "id_Long");
                        if(context.getStringValue("timeBetweenErrorEvents") == null) {
                            context.timeBetweenErrorEvents = null;
                        } else {
                            try{
                                context.timeBetweenErrorEvents=routines.system.ParserUtils.parseTo_Long (context.getProperty("timeBetweenErrorEvents"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "timeBetweenErrorEvents", e.getMessage()));
                                context.timeBetweenErrorEvents=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("deleteIncrement")) {
                context.deleteIncrement = (Integer) parentContextMap.get("deleteIncrement");
            }if (parentContextMap.containsKey("deleteMultiplier")) {
                context.deleteMultiplier = (Integer) parentContextMap.get("deleteMultiplier");
            }if (parentContextMap.containsKey("dwhAggregationDebug")) {
                context.dwhAggregationDebug = (String) parentContextMap.get("dwhAggregationDebug");
            }if (parentContextMap.containsKey("dwhUuid")) {
                context.dwhUuid = (String) parentContextMap.get("dwhUuid");
            }if (parentContextMap.containsKey("etlVersion")) {
                context.etlVersion = (String) parentContextMap.get("etlVersion");
            }if (parentContextMap.containsKey("hoursToKeepDaily")) {
                context.hoursToKeepDaily = (Integer) parentContextMap.get("hoursToKeepDaily");
            }if (parentContextMap.containsKey("hoursToKeepHourly")) {
                context.hoursToKeepHourly = (Integer) parentContextMap.get("hoursToKeepHourly");
            }if (parentContextMap.containsKey("hoursToKeepSamples")) {
                context.hoursToKeepSamples = (Integer) parentContextMap.get("hoursToKeepSamples");
            }if (parentContextMap.containsKey("lastErrorSent")) {
                context.lastErrorSent = (java.util.Date) parentContextMap.get("lastErrorSent");
            }if (parentContextMap.containsKey("ovirtEngineDbDriverClass")) {
                context.ovirtEngineDbDriverClass = (String) parentContextMap.get("ovirtEngineDbDriverClass");
            }if (parentContextMap.containsKey("ovirtEngineDbJdbcConnection")) {
                context.ovirtEngineDbJdbcConnection = (String) parentContextMap.get("ovirtEngineDbJdbcConnection");
            }if (parentContextMap.containsKey("ovirtEngineDbPassword")) {
                context.ovirtEngineDbPassword = (java.lang.String) parentContextMap.get("ovirtEngineDbPassword");
            }if (parentContextMap.containsKey("ovirtEngineDbUser")) {
                context.ovirtEngineDbUser = (String) parentContextMap.get("ovirtEngineDbUser");
            }if (parentContextMap.containsKey("ovirtEngineHistoryDbDriverClass")) {
                context.ovirtEngineHistoryDbDriverClass = (String) parentContextMap.get("ovirtEngineHistoryDbDriverClass");
            }if (parentContextMap.containsKey("ovirtEngineHistoryDbJdbcConnection")) {
                context.ovirtEngineHistoryDbJdbcConnection = (String) parentContextMap.get("ovirtEngineHistoryDbJdbcConnection");
            }if (parentContextMap.containsKey("ovirtEngineHistoryDbPassword")) {
                context.ovirtEngineHistoryDbPassword = (java.lang.String) parentContextMap.get("ovirtEngineHistoryDbPassword");
            }if (parentContextMap.containsKey("ovirtEngineHistoryDbUser")) {
                context.ovirtEngineHistoryDbUser = (String) parentContextMap.get("ovirtEngineHistoryDbUser");
            }if (parentContextMap.containsKey("runDeleteTime")) {
                context.runDeleteTime = (Integer) parentContextMap.get("runDeleteTime");
            }if (parentContextMap.containsKey("runInterleave")) {
                context.runInterleave = (Integer) parentContextMap.get("runInterleave");
            }if (parentContextMap.containsKey("timeBetweenErrorEvents")) {
                context.timeBetweenErrorEvents = (Long) parentContextMap.get("timeBetweenErrorEvents");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("ovirtEngineDbPassword");
			parametersToEncrypt.add("ovirtEngineHistoryDbPassword");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_4Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_4) {
globalMap.put("tRunJob_4_SUBPROCESS_STATE", -1);

e_tRunJob_4.printStackTrace();

}catch (java.lang.Error e_tRunJob_4) {
globalMap.put("tRunJob_4_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_4;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

e_tRunJob_2.printStackTrace();

}catch (java.lang.Error e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tLoop_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tLoop_1) {
globalMap.put("tLoop_1_SUBPROCESS_STATE", -1);

e_tLoop_1.printStackTrace();

}catch (java.lang.Error e_tLoop_1) {
globalMap.put("tLoop_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tLoop_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}catch (java.lang.Error e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tSetGlobalVar_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tSetGlobalVar_1) {
globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", -1);

e_tSetGlobalVar_1.printStackTrace();

}catch (java.lang.Error e_tSetGlobalVar_1) {
globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tSetGlobalVar_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HistoryETL");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tJDBCConnection_8");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_6");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_4");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_5");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tJDBCConnection_7");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tJDBCConnection_8", globalMap.get("conn_tJDBCConnection_8"));
            connections.put("conn_tJDBCConnection_6", globalMap.get("conn_tJDBCConnection_6"));
            connections.put("conn_tJDBCConnection_2", globalMap.get("conn_tJDBCConnection_2"));
            connections.put("conn_tJDBCConnection_1", globalMap.get("conn_tJDBCConnection_1"));
            connections.put("conn_tJDBCConnection_3", globalMap.get("conn_tJDBCConnection_3"));
            connections.put("conn_tJDBCConnection_4", globalMap.get("conn_tJDBCConnection_4"));
            connections.put("conn_tJDBCConnection_5", globalMap.get("conn_tJDBCConnection_5"));
            connections.put("conn_tJDBCConnection_7", globalMap.get("conn_tJDBCConnection_7"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     616098 characters generated by Talend Open Studio for Data Integration 
 *     on the January 11, 2022 at 6:57:40 PM IST
 ************************************************************************************************/